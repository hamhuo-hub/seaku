<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java进阶能力 on 海阔集</title>
    <link>https://hamhuo.xyz/java/advanced/</link>
    <description>Recent content in Java进阶能力 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/java/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AOP面向切面编程</title>
      <link>https://hamhuo.xyz/java/advanced/aop%E5%88%87%E9%9D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/aop%E5%88%87%E9%9D%A2/</guid>
      <description>&lt;p&gt;Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure.&lt;/p&gt;&#xA;&lt;p&gt;AOP是OOP的延续, 两者互补&lt;/p&gt;&#xA;&lt;p&gt;为什么要用AOP&#xA;为了不涉及过多术语, 在介绍AOP之前, 我们介绍下为什么要提出AOP这个概念&lt;/p&gt;&#xA;&lt;p&gt;OOP作为Java的核心设计原则, 是存在一些缺点的.&#xA;比如日志, 我们知道可以用slf4j 提供的工厂发法返回logger,&#xA;但是这个logger的作用范围是初始化的类, 为了实现全局日志需要在所有业务类注入这个logger, 也就是@Slf4j注解&#xA;这会导致代码冗余&lt;/p&gt;&#xA;&lt;p&gt;类似的还有 &lt;a href=&#34;https://hamhuo.xyz/java/advanced/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/&#34;&gt;事务管理&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>FastExcel报表组件</title>
      <link>https://hamhuo.xyz/java/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;提前封装好一些服务&lt;/p&gt;&#xA;&lt;h4 id=&#34;快速导入&#34;&gt;快速导入&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%af%bc%e5%85%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;组件扫描&lt;/p&gt;&#xA;&lt;p&gt;写一个单元测试&#xA;导入excel客户端&#xA;生成excle&#xA;新建一个数组&#xA;调用导入功能&lt;/p&gt;&#xA;&lt;p&gt;解析&#xA;传入文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gateway网关</title>
      <link>https://hamhuo.xyz/java/advanced/gateway%E7%BD%91%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/gateway%E7%BD%91%E5%85%B3/</guid>
      <description>&lt;h4 id=&#34;什么是网关&#34;&gt;什么是网关&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bd%91%e5%85%b3&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;网关负责路由请求、负载均衡、安全认证、流量控制、监控和日志记录等任务。&lt;/p&gt;&#xA;&lt;p&gt;我的理解是, 网关是请求真正进入服务前的过滤, 管理, 控制(重定向), 可以理解为保安大哥&lt;/p&gt;&#xA;&lt;p&gt;网关的结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;路由&#xA;网关的基本模块, 由断言和过滤器组成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;断言&#xA;匹配规则, 当请求路径匹配时允许路由到相关服务&#xA;实现一组匹配规则，让请求找到对应的 Route 进行处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;过滤器&#xA;响应式的过滤器链, 实现请求的过滤&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局过滤器&#xA;全局过滤器作用于所有的路由，不需要单独配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212093859168.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;客户端发起请求, 由 &lt;code&gt;Gateway Handler Mapping&lt;/code&gt;&#xA;接收, 这里执行断言并路由到 &lt;code&gt;Gateway Web Handler&lt;/code&gt; 这里做过滤链, 过滤请求, 最后传递给服务&#xA;过滤器可以在执行前和执行后回调&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等;&lt;/p&gt;&#xA;&lt;p&gt;在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解:&#xA;&lt;a href=&#34;https://hamhuo.xyz/java/advanced/reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%BA%93/&#34;&gt;响应式编程&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;过滤器&#34;&gt;过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;过滤器是由 &lt;code&gt;Servlet&lt;/code&gt; 容器管理的, 也就是说初始化&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250217183936830.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;实践-spring-cloud-gateway-全局过滤器&#34;&gt;实践: Spring Cloud Gateway 全局过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e8%b7%b5-spring-cloud-gateway-%e5%85%a8%e5%b1%80%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;网关选型&lt;code&gt;SpringCloudGateway&lt;/code&gt; 这是目前比较新的选择&lt;/p&gt;&#xA;&lt;p&gt;模板工程基于 &lt;code&gt;pmhub&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;新建自定义的全局过滤器&lt;/p&gt;&#xA;&lt;p&gt;全局过滤器需要实现 &lt;code&gt;GlobalFilter&lt;/code&gt;&#xA;过滤器需要确定执行顺序, 实现&lt;code&gt;Order&lt;/code&gt; 接口&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intercepter拦截器</title>
      <link>https://hamhuo.xyz/java/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description></description>
    </item>
    <item>
      <title>JWT与Session</title>
      <link>https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/</guid>
      <description>&lt;p&gt;作为令牌格式, JWT 和 session 在用户认证上时常用到&lt;/p&gt;&#xA;&lt;h4 id=&#34;session&#34;&gt;Session&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#session&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;经典的 &lt;code&gt;Session&lt;/code&gt; 登录流程如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户向服务器发送用户名和密码。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户随后的每一次请求，都会通过 Cookie，将 &lt;code&gt;session_id&lt;/code&gt; 传回服务器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;单机环境下, session 实现简单, 方便快速, 服务器维护与用户的连接(下称 &lt;code&gt;Sesssion&lt;/code&gt;), 用户传入 id 来更新session&lt;/p&gt;&#xA;&lt;p&gt;但是分布式集群下, 各个服务需要不断的请求并写入session, 这使得session服务器成为了登录中心服务器, 一旦中心服务器挂了, 整个分布应用宕机&lt;/p&gt;&#xA;&lt;p&gt;既然服务器维护session成本这么高, 干脆不维护了, 让用户维护&lt;/p&gt;&#xA;&lt;p&gt;于是诞生了 JWT&lt;/p&gt;&#xA;&lt;h4 id=&#34;jwt&#34;&gt;JWT&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#jwt&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;角色&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;管理员&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;到期时间&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;2018年7月1日0点0分&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nacos配置中心</title>
      <link>https://hamhuo.xyz/java/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
      <description></description>
    </item>
    <item>
      <title>OAuth2认证</title>
      <link>https://hamhuo.xyz/java/advanced/oauth2%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/oauth2%E8%AE%A4%E8%AF%81/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/OAuth&#34;&gt;OAuth&lt;/a&gt;是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。&lt;/p&gt;&#xA;&lt;h4 id=&#34;为什么需要-oauth&#34;&gt;为什么需要 &lt;code&gt;OAuth&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81-oauth&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;以网易云音乐云村账号登录为例&lt;/p&gt;&#xA;&lt;p&gt;传统的用户授权方式是&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户输入用户名密码&lt;/li&gt;&#xA;&lt;li&gt;服务器验证密码, 这里需要存储用户密码到本地&lt;/li&gt;&#xA;&lt;li&gt;返回session/token&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这对于单一服务没什么问题, 因为用户敏感信息和服务都是由网易云存储并提供的&lt;/p&gt;&#xA;&lt;p&gt;但是网易云也支持qq登录&lt;/p&gt;&#xA;&lt;p&gt;按照常识, 用户不会把qq密码提供给网易, 没别的意思, 就是不合逻辑&#xA;那么上述流程就存在问题了&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网易云为了实现qq登录, 不得不保存qq用户信息并部署qq密码登录&lt;/li&gt;&#xA;&lt;li&gt;网易获得了登录用户qq的权限&lt;/li&gt;&#xA;&lt;li&gt;qq密码权限范围被意外扩大了, 现在不止腾讯, 网易也可以获取密码了, 被破解的几率增加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以我们需要在网易和腾讯之间设置一个转换层, 密码在腾讯处理, 通过转换层把令牌交给网易&lt;/p&gt;&#xA;&lt;h4 id=&#34;角色介绍&#34;&gt;角色介绍&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%a7%92%e8%89%b2%e4%bb%8b%e7%bb%8d&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;OAuth 就是这样的一种协议&lt;/p&gt;&#xA;&lt;p&gt;此协议定义了四种角色&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端/客户, 一个应用程序发出 API 请求对受保护资源执行一些行为，而这些行为是经过资源拥有授权的&lt;/li&gt;&#xA;&lt;li&gt;资源拥有者Resource owner)：通常是一个应用的用户，也是资源拥有者，它拥有授予访问在资源 服务器上的资源&lt;/li&gt;&#xA;&lt;li&gt;授权服务器Authorization server)：当前授权服务器从资源拥有者达成共识时，它会发放访问令牌 给客户以允许访问在资源服务器上的受保护的资源 。比较小的 API 提供商可能会使用相同的应用和 URL空间作为授权服务器和资源服务器&lt;/li&gt;&#xA;&lt;li&gt;资源服务器Resource server)：该服务器是用户拥有资源的服务器，它是受 一般我们叫做 OAuth 保护的服务器。 API 提供商，因为它拥有受保护的数据，比如图片、视频、日历或者合同等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250302235946977.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;OAuth  的优点包括简化了用户授权流程，提高了安全性，允许用户选择性地授权资源访问，并支持多 种授权方式（如授权码模式、密码模式、客户端模式等）。它广泛应用于各种互联网应用程序中，例如第 三方登录、 API 访问授权等场景。&lt;/p&gt;&#xA;&lt;h4 id=&#34;实践--spring-cloud-gateway--密码模式的-oauth2-授权模型&#34;&gt;实践:  Spring Cloud GateWay + 密码模式的 OAuth2 授权模型&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e8%b7%b5--spring-cloud-gateway--%e5%af%86%e7%a0%81%e6%a8%a1%e5%bc%8f%e7%9a%84-oauth2-%e6%8e%88%e6%9d%83%e6%a8%a1%e5%9e%8b&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hamhuo.xyz/java/advanced/gateway%E7%BD%91%E5%85%B3/&#34;&gt;网关&lt;/a&gt;, &lt;a href=&#34;https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/&#34;&gt;JWT与Session&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringMVC</title>
      <link>https://hamhuo.xyz/java/advanced/springmvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/springmvc/</guid>
      <description></description>
    </item>
    <item>
      <title>TTL</title>
      <link>https://hamhuo.xyz/java/advanced/transmittablethreadlocalttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/transmittablethreadlocalttl/</guid>
      <description>&lt;p&gt;&lt;code&gt;TransmittableThreadLocal&lt;/code&gt; (TTL) 是增强版的 &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;ThreadLocal.md&#34;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://hamhuo.xyz/java/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/&#34;&gt;拦截器&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;实现ttl&#34;&gt;实现&lt;code&gt;TTL&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e7%8e%b0ttl&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;流程图如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250216213034195.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;https://hamhuo.xyz/java/advanced/gateway%E7%BD%91%E5%85%B3/&#34;&gt;Gateway网关&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;上半部分业务为用户请求登录并返回&lt;code&gt;Token&lt;/code&gt; 该业务从MVC剥离, 设置在网关进行&lt;/p&gt;&#xA;&lt;p&gt;我们主要关注下半部分, 用户携带 &lt;code&gt;Token&lt;/code&gt; 后如何在服务层获取用户信息&lt;/p&gt;&#xA;&lt;p&gt;整体流程为:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户登录请求&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户通过提交用户名和密码进行登录，经过网关的认证，认证服务（如 &lt;code&gt;Auth&lt;/code&gt;）验证用户身份并生成 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;登录请求返回 &lt;code&gt;token&lt;/code&gt; 给用户，用户保存 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续请求携带 Token 登录&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户在后续请求中携带该 &lt;code&gt;token&lt;/code&gt;，这个 &lt;code&gt;token&lt;/code&gt; 用于证明用户的身份。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Nginx 负载均衡&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求首先被发送到 &lt;code&gt;Nginx&lt;/code&gt;，Nginx 会根据负载均衡策略将请求转发到具体的 &lt;strong&gt;网关&lt;/strong&gt;（&lt;code&gt;Gateway&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网关鉴权&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网关负责根据请求中的 &lt;code&gt;token&lt;/code&gt; 进行 &lt;strong&gt;鉴权&lt;/strong&gt;，验证该 &lt;code&gt;token&lt;/code&gt; 是否有效。如果验证通过，网关会继续转发请求；如果验证失败，则拒绝请求或重定向至登录页面。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;拦截器将用户信息放入 TTL&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在请求经过网关后，网关会调用拦截器（如 &lt;code&gt;HeaderInterceptor&lt;/code&gt;）。拦截器会提取请求中的用户信息（如 &lt;code&gt;token&lt;/code&gt; 解密后的用户信息），然后将这些信息存放到 &lt;strong&gt;TTL&lt;/strong&gt;（Thread-Local）中。&lt;/li&gt;&#xA;&lt;li&gt;TTL 是一种线程局部存储机制，用于在当前线程内传递数据，确保在同一请求的生命周期内，后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt; 等）能够访问到这些用户信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续服务从 TTL 获取用户信息&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt;）可以通过访问当前线程的 &lt;strong&gt;TTL&lt;/strong&gt; 中的数据来获取用户信息，而无需每次都从请求中提取或解析 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们所关注的 TTL 在拦截器里实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://hamhuo.xyz/java/advanced/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/websocket/</guid>
      <description>&lt;p&gt;如果需要定期给浏览器推送数据，例如股票行情，或者不定期给浏览器推送数据，例如在线聊天，基于HTTP协议实现这类需求，只能依靠浏览器的JavaScript定时轮询，效率很低且实时性不高。&lt;/p&gt;&#xA;&lt;p&gt;2009年出现的新技术&lt;code&gt;Websocket&lt;/code&gt; 允许建立浏览器客户端和服务端之间的双向连接, 并且发送轻量级的数据模型, 服务端可以在需要时直接向客户端推送消息&lt;/p&gt;&#xA;&lt;p&gt;不同于传统的&lt;code&gt;Http&lt;/code&gt; ,&lt;code&gt;Websocket&lt;/code&gt;  允许建立通路, 可以直接发送信息而不需像HTTP一样创建连接上下文, 原理如下&lt;/p&gt;&#xA;&lt;p&gt;在建立TCP连接后, 附带几个请求头&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;/chat&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;1.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; www.example.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后连接升级为长连接&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.1 101 Switching Protocols&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade: websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection: Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;收到成功响应后表示WebSocket“握手”成功，这样，代表WebSocket的这个TCP连接将不会被服务器关闭，而是一直保持，服务器可随时向浏览器推送消息，浏览器也可随时向服务器推送消息。双方推送的消息既可以是文本消息，也可以是二进制消息，一般来说，绝大部分应用程序会推送基于JSON的文本消息。&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用-websocket&#34;&gt;使用 Websocket&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8-websocket&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;开始前阅读 &lt;a href=&#34;content/en/java/Advanced/_index.md&#34;&gt;架构说明&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;建立新模块 &lt;code&gt;sample-ws&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- ws --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动类&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;/**  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * 描述：程序启动入口  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; *  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @author hamhuo  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @version 1.0.0  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; */&lt;/span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@SpringBootApplication&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableBinding&lt;/span&gt;(Sink.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;WsApplication&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;[]&lt;/span&gt; args) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;run&lt;/span&gt;(WsApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;, args);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现服务端和浏览器的双向通信, 我们要写一个服务器&lt;/p&gt;</description>
    </item>
    <item>
      <title>事务管理</title>
      <link>https://hamhuo.xyz/java/advanced/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h4 id=&#34;事务是什么&#34;&gt;事务是什么?&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%ba%8b%e5%8a%a1%e6%98%af%e4%bb%80%e4%b9%88&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;一组操作, 要么全部执行, 要么全部失败, 把非原子操作封装为原子操作的概念&lt;/p&gt;&#xA;&lt;p&gt;还是老生长谈的原子性问题&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.md#%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98&#34;&gt;原子性问题&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;事务的特性&#34;&gt;事务的特性&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%ba%8b%e5%8a%a1%e7%9a%84%e7%89%b9%e6%80%a7&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;ACID&lt;/p&gt;&#xA;&lt;p&gt;原子性: 事务是最小的执行单位, 不允许分割. 事务的原子性确保动作要么全部完成, 要么不起作用&lt;/p&gt;&#xA;&lt;p&gt;隔离性: 一个用户的事务不能被其他用户干扰, 并发事务之间的数据库独立&lt;/p&gt;&#xA;&lt;p&gt;持久性: 事务提交后, 数据库改变时持久的, 即使发生故障也不能有任何影响&lt;/p&gt;&#xA;&lt;p&gt;最终目的: 一致性: 事务前的数据一致, 事务后的数据一致&lt;/p&gt;&#xA;&lt;p&gt;原子性，隔离性和持久性是数据库的属性，而一致性（在 ACID 意义上）是应用程序的属性&lt;/p&gt;&#xA;&lt;h4 id=&#34;mysql如何保证事务的原子性的&#34;&gt;MySQL如何保证事务的原子性的?&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#mysql%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e4%ba%8b%e5%8a%a1%e7%9a%84%e5%8e%9f%e5%ad%90%e6%80%a7%e7%9a%84&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;所有事务操作都会记录到回滚操作日志, 一旦异常发生就会根据日志进行数据回滚&#xA;回滚日志的优先级高于数据持久化, 也就是说数据库宕机导致数据没能完整写到磁盘上, 再次开机可以根据回滚日志回滚未完成的事务&lt;/p&gt;</description>
    </item>
    <item>
      <title>响应式编程Reactor库</title>
      <link>https://hamhuo.xyz/java/advanced/reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%BA%93/</guid>
      <description></description>
    </item>
    <item>
      <title>声明式服务</title>
      <link>https://hamhuo.xyz/java/advanced/%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1/</guid>
      <description></description>
    </item>
  </channel>
</rss>
