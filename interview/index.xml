<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interview on 海阔集</title>
    <link>http://localhost:51861/interview/</link>
    <description>Recent content in Interview on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:51861/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL</title>
      <link>http://localhost:51861/interview/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:51861/interview/mysql/</guid>
      <description>&lt;h4 id=&#34;什么是mysql&#34;&gt;什么是MySQL&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afmysql&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;一种开源的关系型数据库, 使用频率很高&lt;/p&gt;&#xA;&lt;h4 id=&#34;怎么删除创建一张表和设定主键&#34;&gt;怎么删除/创建一张表和设定主键&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%80%8e%e4%b9%88%e5%88%a0%e9%99%a4%e5%88%9b%e5%bb%ba%e4%b8%80%e5%bc%a0%e8%a1%a8%e5%92%8c%e8%ae%be%e5%ae%9a%e4%b8%bb%e9%94%ae&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;删除&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;drop&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;表名&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;数据库&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建&lt;/p&gt;&#xA;&lt;p&gt;首先指定数据库&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use &lt;span style=&#34;color:#ca9ee6&#34;&gt;database&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;表&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e78284&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;数据类型&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e78284&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;数据类型&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e78284&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;数据类型&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设定主键&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;key&lt;/span&gt; (&lt;span style=&#34;color:#e78284&#34;&gt;列名&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sql升序排序&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select 字段 from 数据库 order by desc/asc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外，如果我需要根据多个字段进行排序，例如先按工资降序排列，再按名字升序排列，我可以使用：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT id, name, salary&#xA;FROM employees&#xA;ORDER BY salary DESC, name ASC;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;mysql-的内连接左连接右连接有什么区别&#34;&gt;MySQL 的内连接、左连接、右连接有什么区别?&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#mysql-%e7%9a%84%e5%86%85%e8%bf%9e%e6%8e%a5%e5%b7%a6%e8%bf%9e%e6%8e%a5%e5%8f%b3%e8%bf%9e%e6%8e%a5%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;内联, 返回两个表的交集&#xA;左联, 返回左表所有记录, 右表匹配返回, 没有匹配的值填空&#xA;右联是左联把表换个顺序&lt;/p&gt;&#xA;&lt;h4 id=&#34;数据库三大范式&#34;&gt;数据库三大范式&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e4%b8%89%e5%a4%a7%e8%8c%83%e5%bc%8f&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;第一范式, 表的每一列都是不可分割的基本单元&lt;/p&gt;&#xA;&lt;p&gt;地址作为省市区的集合应该拆成四个字段&lt;/p&gt;&#xA;&lt;p&gt;第二范式, 在第一范式的基础上, 消除部分依赖&lt;/p&gt;&#xA;&lt;p&gt;所有非主键字段都应该依赖主键, 而不能只与主键的某一部分相关。&lt;/p&gt;&#xA;&lt;p&gt;比如订单ID和商品ID和商品名, 单价&lt;/p&gt;&#xA;&lt;p&gt;应该将其拆分为订单表、订单商品关联表、商品表。&lt;/p&gt;&#xA;&lt;p&gt;第三范式. 在第二范式的基础上消除传递依赖&lt;/p&gt;&#xA;&lt;p&gt;非主键列应该只依赖于主键列，不依赖于其他非主键列。&lt;/p&gt;&#xA;&lt;p&gt;设计订单信息表的时候，可以把客户名称、所属公司、联系方式等信息拆分到客户信息表中，然后在订单信息表中用客户编号进行关联。&lt;/p&gt;</description>
    </item>
    <item>
      <title>并发编程</title>
      <link>http://localhost:51861/interview/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:51861/interview/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;h4 id=&#34;并行和并发的区别&#34;&gt;并行和并发的区别&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%b9%b6%e8%a1%8c%e5%92%8c%e5%b9%b6%e5%8f%91%e7%9a%84%e5%8c%ba%e5%88%ab&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;处理器同时处理多个任务为并行&#xA;处理器在一定的时间间隔, 交替处理任务交并发&lt;/p&gt;&#xA;&lt;p&gt;类似红绿灯, 路口所有车道车辆通信为并行&#xA;但是路口一定时间间隔内只允许一辆车通过, 不同车道的车交替通过叫并发&lt;/p&gt;&#xA;&lt;h4 id=&#34;什么是线程安全&#34;&gt;什么是线程安全&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;2/5/2025&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;线程安全是指,  多线程环境下访问共享资源时, 线程可以正确执行, 而不会出现问题&lt;/p&gt;&#xA;&lt;p&gt;线程安全有以下几个问题&lt;/p&gt;&#xA;&lt;p&gt;可见性问题&#xA;线程对共享变量的修改能被其他线程立即看到&#xA;可以通过 volatile 关键字保证数据一致性&lt;/p&gt;&#xA;&lt;p&gt;原子性问题&#xA;操作是不可分割的, 成功则全部成功, 失败则全部失败&#xA;原子性可以通过正确的同步机制 如 syncroizd 关键字实现线程同步以及原子操作来保证, 防止操作被意外中断&lt;/p&gt;&#xA;&lt;p&gt;活跃性问题&#xA;当多线程争夺有限资源时可能会导致死锁, 饥饿等问题&lt;/p&gt;&#xA;&lt;h4 id=&#34;如何保证线程安全&#34;&gt;如何保证线程安全&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;2/9&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;为了保证线程安全，可以使用 synchronized 关键字或 ReentrantLock 来保证共享资源的互斥访问。&lt;/p&gt;&#xA;&lt;p&gt;对于简单的变量操作，可以使用 Atomic 类来实现无锁线程安全。&lt;/p&gt;&#xA;&lt;p&gt;可以使用线程安全容器，如 ConcurrentHashMap 或 CopyOnWriteArrayList。&lt;/p&gt;&#xA;&lt;p&gt;对于每个线程独立的数据，可以使用 ThreadLocal 来为每个线程提供独立的变量副本。&lt;/p&gt;&#xA;&lt;p&gt;对于简单的状态标志，可以使用 volatile 关键字确保多线程间的可见性。&lt;/p&gt;&#xA;&lt;h4 id=&#34;有个int的变量为0十个线程轮流对其进行操作循环10000次结果是大于小于还是等于10万为什么&#34;&gt;有个int的变量为0，十个线程轮流对其进行++操作（循环10000次），结果是大于小于还是等于10万，为什么？&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%9c%89%e4%b8%aaint%e7%9a%84%e5%8f%98%e9%87%8f%e4%b8%ba0%e5%8d%81%e4%b8%aa%e7%ba%bf%e7%a8%8b%e8%bd%ae%e6%b5%81%e5%af%b9%e5%85%b6%e8%bf%9b%e8%a1%8c%e6%93%8d%e4%bd%9c%e5%be%aa%e7%8e%af10000%e6%ac%a1%e7%bb%93%e6%9e%9c%e6%98%af%e5%a4%a7%e4%ba%8e%e5%b0%8f%e4%ba%8e%e8%bf%98%e6%98%af%e7%ad%89%e4%ba%8e10%e4%b8%87%e4%b8%ba%e4%bb%80%e4%b9%88&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;小于&lt;/p&gt;&#xA;&lt;p&gt;int++ 实际上可以分解为三步：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;读取变量的值。&lt;/li&gt;&#xA;&lt;li&gt;将读取到的值加 1。&lt;/li&gt;&#xA;&lt;li&gt;将结果写回变量。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;多线程并发操作共享的i 会出现竞态条件&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
