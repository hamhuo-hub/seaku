<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>159.261 Gaming Programming on Hamhuo</title>
    <link>https://example.docsy.dev/school/159.261/</link>
    <description>Recent content in 159.261 Gaming Programming on Hamhuo</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://example.docsy.dev/school/159.261/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>159.261 Assignment1</title>
      <link>https://example.docsy.dev/school/159.261/assignment/assignment1/assignment1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.docsy.dev/school/159.261/assignment/assignment1/assignment1/</guid>
      <description>&lt;h4 id=&#34;420&#34;&gt;4/20&lt;/h4&gt;&#xA;&lt;p&gt;Demo1&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Demo.java&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;requirement-definition&#34;&gt;Requirement Definition&lt;/h4&gt;&#xA;&lt;h4 id=&#34;424&#34;&gt;4/24&lt;/h4&gt;&#xA;&lt;p&gt;Demo1&lt;/p&gt;&#xA;&lt;p&gt;Issue:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;尺寸不对&lt;/li&gt;&#xA;&lt;li&gt;背景颜色是黑的&lt;/li&gt;&#xA;&lt;li&gt;在没有输入下(初始化)蛇不动&lt;/li&gt;&#xA;&lt;li&gt;吃苹果蛇不增长长度&lt;/li&gt;&#xA;&lt;li&gt;蛇的颜色不对&lt;/li&gt;&#xA;&lt;li&gt;缺少贴图&#xA;Fun&lt;/li&gt;&#xA;&lt;li&gt;Fun:帧数可调节&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;4/26&#xA;完成游戏，很简单AI全部搞定&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rythem game</title>
      <link>https://example.docsy.dev/school/159.261/assignment/assignment2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.docsy.dev/school/159.261/assignment/assignment2/</guid>
      <description>&lt;h4 id=&#34;58&#34;&gt;5/8&lt;/h4&gt;&#xA;&lt;p&gt;写了定时器，输入BPM可以控制实体移动&#xA;需要完善逻辑，尽可能改成以节拍控制，根据不同节拍数控制实体动作&lt;/p&gt;&#xA;&lt;p&gt;需求，攻击模式设计。继承enemie类重写移动策略&lt;/p&gt;&#xA;&lt;p&gt;以节拍为单位，共两种策略-移动与攻击（初步设定攻击时静止）&#xA;移动目标是靠近玩家，攻击无目标，但是攻击频率固定。&lt;/p&gt;&#xA;&lt;p&gt;问题：玩家在快速击键时会快速移动（floating）忽略节拍 &amp;ndash; 缺少移动计数，增加一个移动计数&lt;/p&gt;&#xA;&lt;p&gt;目前的设计是以帧为单位更新的，所有输入在一帧内计算。为了保证绘图时按照帧为单位，游戏中按照节拍为单位，需要限制更新。&#xA;所有需要计算的变量在节拍开始时初始化完毕，无论该节拍内存在几帧，节拍时间固定。也就是说绘图只是两个节拍状态之间的过度，变量在节拍之间的修改会被忽略（冻结）&lt;/p&gt;&#xA;&lt;h4 id=&#34;510&#34;&gt;5/10&lt;/h4&gt;&#xA;&lt;p&gt;梳理游戏流程：&#xA;我们已经有一个基础的游戏引擎类，该类有如下方法&lt;/p&gt;&#xA;&lt;p&gt;数学方法&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510150432521.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;绘图方法&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510150506105.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;资源加载&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510150618208.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接口&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510150712674.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;监听&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510150738414.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该类是最底层的游戏引擎，继承该类只需要重写绘制逻辑即可。其中的  &lt;br&gt;&#xA;&lt;code&gt;paintCompoent()&lt;/code&gt;方法可视为绘制那些对象？&#xA;&lt;code&gt;update()&lt;/code&gt; 可视为怎样绘制对象？&lt;/p&gt;&#xA;&lt;p&gt;游戏引擎是一个接口/抽象类，其目的是要求游戏主类继承游戏引擎并重写其中绘制方法（需要绘制那些对象/如何绘制），因此我们需要创建一个游戏主类来协调所有游戏的对象 &lt;code&gt;GameController&lt;/code&gt; 该对象继承引擎，因此可视为引擎的实现类&lt;/p&gt;&#xA;&lt;p&gt;游戏主类/游戏控制器的职责如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新建所有对象&lt;/li&gt;&#xA;&lt;li&gt;控制协调所有对象&lt;/li&gt;&#xA;&lt;li&gt;调用对象的更新方法&lt;/li&gt;&#xA;&lt;li&gt;负责资源的加载&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在讲游戏引擎如何使用之前，先来说游戏中的所有对象有什么属性和方法&#xA;首先敌人类&lt;/p&gt;&#xA;&lt;p&gt;敌人在游戏中的作用是，随节拍移动并接近玩家，攻击玩家。目标是杀死玩家。因此敌人类需要&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一个全局的节拍器来控制移动时机。这个节拍器需要==保证全局单例==。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当前坐标来计算路径。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;血量&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;攻击力&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510153820369.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;动画/绘制方式&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;声音/打击反馈&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;前三个没什么可说的，主要是动画和声音。因为所有实现类都有自己的音效和动画。所以需要写一个抽象方法来实现多态&lt;/p&gt;&#xA;&lt;p&gt;动画和音效方法的逻辑如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;游戏主类调用地图类更新&lt;/li&gt;&#xA;&lt;li&gt;地图类调用所有实体的新建/更新逻辑&lt;/li&gt;&#xA;&lt;li&gt;敌人根据当前状态调用相应绘图逻辑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;控制器和地图一会再说，先来说敌人类的更新方法&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;判断敌人当前状态&lt;/li&gt;&#xA;&lt;li&gt;执行对应的动画/声音（哈希表）（更新策略）&#xA;与其他类的交互/生命周期等在地图处理，以节拍为更新信号。最后在控制器绘制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们尝试创建一只史莱姆 &lt;code&gt;Slime&lt;/code&gt;&#xA;首先继承 &lt;code&gt;Enemy&lt;/code&gt;&#xA;为了绘制动画，我们需要数组来存储动画帧&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510202332606.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所有资源的加载都应该在控制器进行，所以&lt;/p&gt;&#xA;&lt;p&gt;写了史莱姆的攻击动画&#xA;问题：Enemy（敌人）类的代码冗余，史莱姆或者其他实体继承敌人类后应该只重写攻击方式和动画，其他直接复用敌人类代码。需要修改敌人类和史莱姆的攻击方法&#xA;目前的敌人类逻辑是：&#xA;敌人类初始化：&#xA;敌人状态：&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510144204314.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;敌人实体在与玩家交互时会在上述6种状态间切换。所有敌人实体目前均只有这6种状态。&lt;/p&gt;&#xA;&lt;p&gt;敌人状态会与敌人动画绑定，根据不同的状态来调用不同的sprite，使用哈希表来做状态绑定。所有敌人实体都需要这个属性，写到父类里面做多态&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/hamhuo-hub/HamPic@img/img/20250510145208594.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们不希望所有子类共享一个哈希表，所以在子类重写一个哈希表覆盖&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://example.docsy.dev/school/159.261/assignment/assignment1/read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.docsy.dev/school/159.261/assignment/assignment1/read/</guid>
      <description>&lt;h1 id=&#34;snake-game--assignment-1&#34;&gt;Snake Game — Assignment 1&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;by Hamhuo&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;-introduction&#34;&gt;🕹 Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This project is a classic Snake game implemented using Java AWT and a custom GameEngine. &lt;br&gt;&#xA;The player controls a snake moving on a 25×25 grid, growing longer by eating apples. &lt;br&gt;&#xA;The game ends if the snake hits the wall or collides with itself.&lt;/p&gt;&#xA;&lt;h2 id=&#34;-highlights&#34;&gt;✨ Highlights&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-efficient-direction-control&#34;&gt;1. Efficient Direction Control&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The snake&amp;rsquo;s movement direction is managed using &lt;strong&gt;numeric encoding combined with XOR operations&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Direct reversal (e.g., moving from LEFT to RIGHT immediately) is prevented with a simple and efficient one-line check:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;This approach is cleaner and more efficient than traditional if-else chains.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-flexible-speed-and-length-configuration&#34;&gt;2. Flexible Speed and Length Configuration&lt;/h3&gt;&#xA;&lt;p&gt;Before starting the game, a settings dialog allows players to customize:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
