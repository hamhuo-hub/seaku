<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java进阶能力 on 海阔集</title>
    <link>http://localhost:1313/categories/java%E8%BF%9B%E9%98%B6%E8%83%BD%E5%8A%9B/</link>
    <description>Recent content in Java进阶能力 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/categories/java%E8%BF%9B%E9%98%B6%E8%83%BD%E5%8A%9B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java进阶能力</title>
      <link>http://localhost:1313/docs/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/</guid>
      <description>&lt;p&gt;内容来源:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;沉默王二 GitHub 上开源的知识库《&lt;a href=&#34;https://github.com/itwanger/toBeBetterJavaer&#34;&gt;Java 进阶之路&lt;/a&gt;》&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/tutorials&#34;&gt;rabbitMQ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://javaguide.cn/&#34;&gt;JavaGuide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/19730582/answer/1663627873&#34;&gt;知乎-阿里大淘宝&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Java进阶能力&#xA;Java作为一门编程语言, 需要和其他组件一起完成某个项目&#xA;一名好的程序员不仅要知道去哪里import, 更要知道import什么组件, 甚至为组件贡献代码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis&lt;/li&gt;&#xA;&lt;li&gt;中间件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;什么是中间件? 为什么要用?&lt;/p&gt;&#xA;&lt;p&gt;维基百科这样说&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;中间件（英语：Middleware），又译中间件、中介层，是一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以借助中间件在不同的技术架构之间共享信息与资源。中间件位于客户机服务器的操作系统之上，管理着计算资源和网络通信。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;简单来说：&lt;strong&gt;中间件就是一类为应用软件服务的软件，应用软件是为用户服务的，用户不会接触或者使用到中间件。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;中间件有 RPC 框架、消息队列、MQ 分布式组件、HTTP 服务器、任务调度框架、配置中心、数据库层的分库分表工具和数据迁移工具等等。&lt;/p&gt;&#xA;&lt;p&gt;几个容易混淆的概念&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;二方/三方的工具不是中间件, 这些工具包是在各种开发场景中沉淀的一些工具类集合, 本质也是代码的一部分&lt;/li&gt;&#xA;&lt;li&gt;业务平台不是中间件，业务平台是从服务的视角抽象的能同时支撑多个业务，业务之间的信息能形成交互和增强的平台。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;总之, 中间件是系统软件和应用软件之间, 软件与各部件之间, 管理客户机与系统软件之间的计算资源和网络通信服务于用户但用户不可见的软件&lt;/p&gt;</description>
    </item>
    <item>
      <title>TTL</title>
      <link>http://localhost:1313/docs/advanced/ttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/ttl/</guid>
      <description>&lt;p&gt;&lt;code&gt;TransmittableThreadLocal&lt;/code&gt; (TTL) 是增强版的 &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;ThreadLocal&#34;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>消息队列</title>
      <link>http://localhost:1313/docs/advanced/mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/mq/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.aliyun.com/article/953777&#34;&gt;https://developer.aliyun.com/article/953777&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;什么是消息队列&#34;&gt;什么是消息队列&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;消息队列（Message Queue，简称MQ）指保存消息的一个容器，其实本质就是一个保存数据的队列。&lt;/p&gt;&#xA;&lt;p&gt;消息中间件是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的构建。&#xA;消息中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性的系统架构。&lt;/p&gt;&#xA;&lt;p&gt;可以理解为: 消息队列, 分布式做异步通信, 流量削峰, 服务解耦的重要角色&lt;/p&gt;&#xA;&lt;p&gt;平滑处理: 放到缓存, 依次处理, 实现削峰填谷, 消息中间件可以通过缓存请求，避免系统崩&#xA;溃。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网关Gateway</title>
      <link>http://localhost:1313/docs/advanced/%E7%BD%91%E5%85%B3gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/%E7%BD%91%E5%85%B3gateway/</guid>
      <description>&lt;h4 id=&#34;什么是网关&#34;&gt;什么是网关&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bd%91%e5%85%b3&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;网关负责路由请求、负载均衡、安全认证、流量控制、监控和日志记录等任务。&lt;/p&gt;&#xA;&lt;p&gt;我的理解是, 网关是请求真正进入服务前的过滤, 管理, 控制(重定向), 可以理解为保安大哥&lt;/p&gt;&#xA;&lt;p&gt;网关的结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;路由&#xA;网关的基本模块, 由断言和过滤器组成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;断言&#xA;匹配规则, 当请求路径匹配时允许路由到相关服务&#xA;实现一组匹配规则，让请求找到对应的 Route 进行处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;过滤器&#xA;响应式的过滤器链, 实现请求的过滤&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局过滤器&#xA;全局过滤器作用于所有的路由，不需要单独配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212093859168.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;客户端发起请求, 由 &lt;code&gt;Gateway Handler Mapping&lt;/code&gt;&#xA;接收, 这里执行断言并路由到 &lt;code&gt;Gateway Web Handler&lt;/code&gt; 这里做过滤链, 过滤请求, 最后传递给服务&#xA;过滤器可以在执行前和执行后回调&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等;&lt;/p&gt;&#xA;&lt;p&gt;在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解:&#xA;&lt;a href=&#34;http://localhost:1313/docs/advanced/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8Breactor%E5%BA%93/&#34;&gt;响应式编程&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;自定义网关实现全局过滤器&#34;&gt;自定义网关实现全局过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bd%91%e5%85%b3%e5%ae%9e%e7%8e%b0%e5%85%a8%e5%b1%80%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;网关选型&lt;code&gt;SpringCloudGateway&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;模板工程基于 &lt;code&gt;pmhub&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;新建自定义的全局过滤器&lt;/p&gt;&#xA;&lt;p&gt;全局过滤器需要实现 &lt;code&gt;GlobalFilter&lt;/code&gt;&#xA;过滤器需要确定执行顺序, 实现&lt;code&gt;Order&lt;/code&gt; 接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@Component&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;AuthFilter&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;implements&lt;/span&gt; GlobalFilter, Ordered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该过滤器实现如下功能&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;请求耗时记录&lt;/li&gt;&#xA;&lt;li&gt;白名单过滤&lt;/li&gt;&#xA;&lt;li&gt;Token鉴权&lt;/li&gt;&#xA;&lt;li&gt;日志输出&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;请求耗时记录:&lt;/p&gt;&#xA;&lt;p&gt;全局过滤器的优先级较高, 因此把请求进入过滤器的时间作为起点, 业务执行完毕执行&lt;code&gt;post&lt;/code&gt; 业务逻辑. 进行简单的时间相减&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
