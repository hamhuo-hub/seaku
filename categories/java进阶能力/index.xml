<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java进阶能力 on 海阔集</title>
    <link>https://hamhuo.xyz/categories/java%E8%BF%9B%E9%98%B6%E8%83%BD%E5%8A%9B/</link>
    <description>Recent content in Java进阶能力 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/categories/java%E8%BF%9B%E9%98%B6%E8%83%BD%E5%8A%9B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastDFS分布式存储</title>
      <link>https://hamhuo.xyz/docs/advanced/fastdfs/fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/fastdfs/fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h4 id=&#34;为什么需要文件服务器&#34;&gt;为什么需要文件服务器?&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e6%96%87%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;浏览器请求可能会携带头像文件, 服务器处理后存储在本地磁盘&lt;/p&gt;&#xA;&lt;p&gt;但是假如还有一个服务需要操作订单&lt;/p&gt;&#xA;&lt;p&gt;那么就需要异步从存储头像拿头像&lt;/p&gt;&#xA;&lt;p&gt;也就是说用户信息业务崩溃后, 导致订单服务器也一并崩溃&lt;/p&gt;&#xA;&lt;p&gt;为了解耦合, 我们把文件存储到专门的服务器里, 保证系统稳定&lt;/p&gt;&#xA;&lt;p&gt;当用户在订单管理修改信息后, 还需要同步到用户信息服务器&lt;/p&gt;&#xA;&lt;p&gt;这需要传递两次, 还要保证一致性, 倒不如直接把服务器分离, 只传递文件地址&#xA;这样就可以减少服务间的传递, 而且也不需要传递大尺寸的文件, 只要传链接就可以&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用&#34;&gt;使用&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;检查nacos配置&#xA;第三方服务&lt;/p&gt;&#xA;&lt;p&gt;下载地址是由nginx管理的, 所以还需要nginx配置&lt;/p&gt;&#xA;&lt;p&gt;注入fastdfs客户端&#xA;配置文件服务器url 也就是 nginx的IP地址&lt;/p&gt;&#xA;&lt;p&gt;上传文件&#xA;传入 MultipatFile file&#xA;首先提取后缀名, 左闭右开去掉点放到新的子串&#xA;直接调客户端上传即可&#xA;用户回显, 是否上传成功, 看有没有文件信息就可以&lt;/p&gt;&#xA;&lt;p&gt;下载&#xA;也就是响应文件, 创建响应实体内部放字节流&#xA;调客户端下载, 传入group组和文件id&#xA;下载完成的文件命名, 用时间就可以&#xA;定义好的名字回传道响应的响应头&lt;/p&gt;&#xA;&lt;p&gt;删除文件&#xA;还是组和文件id&#xA;调客户端删除&#xA;回调是int值, 匹配定义的预设输出传回即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>FastExcel报表组件</title>
      <link>https://hamhuo.xyz/docs/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;提前封装好一些服务&lt;/p&gt;&#xA;&lt;h4 id=&#34;快速导入&#34;&gt;快速导入&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%af%bc%e5%85%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;组件扫描&lt;/p&gt;&#xA;&lt;p&gt;写一个单元测试&#xA;导入excel客户端&#xA;生成excle&#xA;新建一个数组&#xA;调用导入功能&lt;/p&gt;&#xA;&lt;p&gt;解析&#xA;传入文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gateway网关</title>
      <link>https://hamhuo.xyz/docs/advanced/gateway%E7%BD%91%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/gateway%E7%BD%91%E5%85%B3/</guid>
      <description>&lt;h4 id=&#34;什么是网关&#34;&gt;什么是网关&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bd%91%e5%85%b3&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;网关负责路由请求、负载均衡、安全认证、流量控制、监控和日志记录等任务。&lt;/p&gt;&#xA;&lt;p&gt;我的理解是, 网关是请求真正进入服务前的过滤, 管理, 控制(重定向), 可以理解为保安大哥&lt;/p&gt;&#xA;&lt;p&gt;网关的结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;路由&#xA;网关的基本模块, 由断言和过滤器组成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;断言&#xA;匹配规则, 当请求路径匹配时允许路由到相关服务&#xA;实现一组匹配规则，让请求找到对应的 Route 进行处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;过滤器&#xA;响应式的过滤器链, 实现请求的过滤&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局过滤器&#xA;全局过滤器作用于所有的路由，不需要单独配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212093859168.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;客户端发起请求, 由 &lt;code&gt;Gateway Handler Mapping&lt;/code&gt;&#xA;接收, 这里执行断言并路由到 &lt;code&gt;Gateway Web Handler&lt;/code&gt; 这里做过滤链, 过滤请求, 最后传递给服务&#xA;过滤器可以在执行前和执行后回调&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等;&lt;/p&gt;&#xA;&lt;p&gt;在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解:&#xA;&lt;a href=&#34;https://hamhuo.xyz/docs/advanced/reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%BA%93/&#34;&gt;响应式编程&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;过滤器&#34;&gt;过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;过滤器是由 &lt;code&gt;Servlet&lt;/code&gt; 容器管理的, 也就是说初始化&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250217183936830.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;自定义网关实现全局过滤器&#34;&gt;自定义网关实现全局过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bd%91%e5%85%b3%e5%ae%9e%e7%8e%b0%e5%85%a8%e5%b1%80%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;网关选型&lt;code&gt;SpringCloudGateway&lt;/code&gt; 这是目前比较新的选择&lt;/p&gt;&#xA;&lt;p&gt;模板工程基于 &lt;code&gt;pmhub&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;新建自定义的全局过滤器&lt;/p&gt;&#xA;&lt;p&gt;全局过滤器需要实现 &lt;code&gt;GlobalFilter&lt;/code&gt;&#xA;过滤器需要确定执行顺序, 实现&lt;code&gt;Order&lt;/code&gt; 接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@Component&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;AuthFilter&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;implements&lt;/span&gt; GlobalFilter, Ordered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该过滤器实现如下功能&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intercepter拦截器</title>
      <link>https://hamhuo.xyz/docs/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description></description>
    </item>
    <item>
      <title>Java进阶能力</title>
      <link>https://hamhuo.xyz/docs/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/</guid>
      <description>&lt;p&gt;内容来源:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;沉默王二 GitHub 上开源的知识库《&lt;a href=&#34;https://github.com/itwanger/toBeBetterJavaer&#34;&gt;Java 进阶之路&lt;/a&gt;》&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/tutorials&#34;&gt;rabbitMQ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://javaguide.cn/&#34;&gt;JavaGuide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/19730582/answer/1663627873&#34;&gt;知乎-阿里大淘宝&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Java进阶能力&#xA;Java作为一门编程语言, 需要和其他组件一起完成某个项目&#xA;一名好的程序员不仅要知道去哪里import, 更要知道import什么组件, 甚至为组件贡献代码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis&lt;/li&gt;&#xA;&lt;li&gt;WebSocket&lt;/li&gt;&#xA;&lt;li&gt;FastExcel报表&lt;/li&gt;&#xA;&lt;li&gt;Gateway网关(SpringCloudGateway)&lt;/li&gt;&#xA;&lt;li&gt;中间件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息队列&lt;/li&gt;&#xA;&lt;li&gt;Nacos配置中心&lt;/li&gt;&#xA;&lt;li&gt;Sential声明式服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;需要相关模块依赖, 如下是模块的实例&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;wms-sample-mq&lt;/code&gt; 模块&#xA;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8caaee&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.hamhuo.star&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;wms-java&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${revision}&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;relativePath&amp;gt;&lt;/span&gt;../pom.xml&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/relativePath&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;wms-sample&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;        &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- spring mvc --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- common --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.hamhuo&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;wms-common&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.hamhuo.star&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;wms-domain&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- alibaba nacos discovery --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- alibaba nacos config --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-config&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动类&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nacos配置中心</title>
      <link>https://hamhuo.xyz/docs/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
      <description></description>
    </item>
    <item>
      <title>RocketMQ</title>
      <link>https://hamhuo.xyz/docs/advanced/rocktmq/rocketmq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/rocktmq/rocketmq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;了解: &lt;a href=&#34;WebSocket&#34;&gt;WebSocket&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;学习过 &lt;code&gt;websocekt&lt;/code&gt; 后, 我们知道通过建立长连接可以实现 服务器和浏览器的双向推送&#xA;通过浏览器协调, 可以实现端对端的通信&#xA;&lt;code&gt;webServer&lt;/code&gt; 初始化一个 Session 池作为核心容器, 当 &lt;code&gt;webServer&lt;/code&gt; 在分布式中作为服务注入时, 其他服务也要调用消息怎么办?&lt;/p&gt;&#xA;&lt;p&gt;可以让其他服务作为消费者, 让服务生产消息, 但是&lt;code&gt;webserver&lt;/code&gt; 一旦负责消息通讯和消息生产职责就不再单一, 需要解耦&lt;/p&gt;&#xA;&lt;p&gt;长连接传递的消息是即时的, 一旦连接断开消息就会丢失, 我们需要一个方法持久化消息&lt;/p&gt;&#xA;&lt;p&gt;长连接会阻塞服务线程, 建立连接后双方不得不占用一个线程持续的监听, 需要把监听的任务解耦出去. 一旦并发消息过多, 服务器可能会崩溃&lt;/p&gt;&#xA;&lt;p&gt;综上, 我们有了消息队列&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步通信&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中的应用程序需要异步通信时，可以使用消息中间件来实现。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在一个电商系统中，订单系统下单后需要给库存系统发送异步消息，以减少系统之间的耦合，避免同步调用导致的性能问题或响应延迟。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;减少耦合&lt;/strong&gt;：系统可以在不等待响应的情况下继续进行其他操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统性能&lt;/strong&gt;：减少了同步阻塞，提高了响应速度。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用解耦&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当应用程序需要进行松耦合的通信时，可以使用消息中间件来实现。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在微服务架构中，不同服务之间可以通过消息中间件进行通信，避免直接调用服务导致的依赖关系过强。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;降低耦合度&lt;/strong&gt;：服务之间通过消息中间件进行通信，不需要直接调用，提高系统的灵活性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;增强可维护性&lt;/strong&gt;：服务之间的更新和维护不影响其他服务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息排队&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中需要处理大量的消息时，可以使用消息中间件来实现消息排队，确保消息的顺序和可靠性。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在金融行业中，需要处理大量的交易消息，消息中间件可以实现消息排队，确保每笔交易都得到正确处理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证消息顺序&lt;/strong&gt;：确保按顺序处理每条消息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息可靠性&lt;/strong&gt;：即使出现系统故障，未处理的消息仍然可以从队列中恢复。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统需要处理大量的请求时，可以使用消息中间件来实现负载均衡。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在电商系统中，订单系统下单请求可以通过消息中间件发送到多个库存系统中，从而实现负载均衡。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分担负载&lt;/strong&gt;：通过将消息分发到多个消费者，实现负载均衡，避免单点压力。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统吞吐量&lt;/strong&gt;：通过多节点并发处理提高系统处理能力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统削峰填谷&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中出现高峰期时，可以使用消息中间件来平滑处理请求。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在电商系统中，双十一等促销活动可能会导致系统请求量急剧增加，消息中间件可以通过缓存请求，避免系统崩溃。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;平滑流量&lt;/strong&gt;：在高峰期通过消息队列缓存请求，避免系统过载。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统稳定性&lt;/strong&gt;：避免高并发请求导致的性能瓶颈或服务崩溃。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;使用-rocketmq&#34;&gt;使用 &lt;code&gt;RocketMQ&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8-rocketmq&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;并发环境下的消息队列用阿里提供的 &lt;code&gt;RocketMQ&lt;/code&gt; 合适&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;server&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;port&lt;/span&gt;: ${sp.publish}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;spring&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;application&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;name&lt;/span&gt;: ${sn.publish}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;cloud&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;stream&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;rocketmq&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;binder&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;name-server&lt;/span&gt;: ${rocket-mq.name-server}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;bindings&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;output&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;producer&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;group&lt;/span&gt;: socketGroup  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;sync&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;true&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;bindings&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;output&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;destination&lt;/span&gt;: test-topic  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;content-type&lt;/span&gt;: application/json  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;#开启MQ的日志  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;logging&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;level&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;com&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;alibaba&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;cloud&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;stream&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;binder&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;rocketmq&lt;/span&gt;: DEBUG&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;项目依赖&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringMVC</title>
      <link>https://hamhuo.xyz/docs/advanced/springmvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/springmvc/</guid>
      <description></description>
    </item>
    <item>
      <title>TTL</title>
      <link>https://hamhuo.xyz/docs/advanced/transmittablethreadlocalttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/transmittablethreadlocalttl/</guid>
      <description>&lt;p&gt;&lt;code&gt;TransmittableThreadLocal&lt;/code&gt; (TTL) 是增强版的 &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;ThreadLocal&#34;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://hamhuo.xyz/docs/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/&#34;&gt;拦截器&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;实现ttl&#34;&gt;实现&lt;code&gt;TTL&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e7%8e%b0ttl&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;流程图如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250216213034195.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;https://hamhuo.xyz/docs/advanced/gateway%E7%BD%91%E5%85%B3/&#34;&gt;Gateway网关&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;上半部分业务为用户请求登录并返回&lt;code&gt;Token&lt;/code&gt; 该业务从MVC剥离, 设置在网关进行&lt;/p&gt;&#xA;&lt;p&gt;我们主要关注下半部分, 用户携带 &lt;code&gt;Token&lt;/code&gt; 后如何在服务层获取用户信息&lt;/p&gt;&#xA;&lt;p&gt;整体流程为:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户登录请求&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户通过提交用户名和密码进行登录，经过网关的认证，认证服务（如 &lt;code&gt;Auth&lt;/code&gt;）验证用户身份并生成 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;登录请求返回 &lt;code&gt;token&lt;/code&gt; 给用户，用户保存 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续请求携带 Token 登录&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户在后续请求中携带该 &lt;code&gt;token&lt;/code&gt;，这个 &lt;code&gt;token&lt;/code&gt; 用于证明用户的身份。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Nginx 负载均衡&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求首先被发送到 &lt;code&gt;Nginx&lt;/code&gt;，Nginx 会根据负载均衡策略将请求转发到具体的 &lt;strong&gt;网关&lt;/strong&gt;（&lt;code&gt;Gateway&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网关鉴权&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网关负责根据请求中的 &lt;code&gt;token&lt;/code&gt; 进行 &lt;strong&gt;鉴权&lt;/strong&gt;，验证该 &lt;code&gt;token&lt;/code&gt; 是否有效。如果验证通过，网关会继续转发请求；如果验证失败，则拒绝请求或重定向至登录页面。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;拦截器将用户信息放入 TTL&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在请求经过网关后，网关会调用拦截器（如 &lt;code&gt;HeaderInterceptor&lt;/code&gt;）。拦截器会提取请求中的用户信息（如 &lt;code&gt;token&lt;/code&gt; 解密后的用户信息），然后将这些信息存放到 &lt;strong&gt;TTL&lt;/strong&gt;（Thread-Local）中。&lt;/li&gt;&#xA;&lt;li&gt;TTL 是一种线程局部存储机制，用于在当前线程内传递数据，确保在同一请求的生命周期内，后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt; 等）能够访问到这些用户信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续服务从 TTL 获取用户信息&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt;）可以通过访问当前线程的 &lt;strong&gt;TTL&lt;/strong&gt; 中的数据来获取用户信息，而无需每次都从请求中提取或解析 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们所关注的 TTL 在拦截器里实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://hamhuo.xyz/docs/advanced/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/websocket/</guid>
      <description>&lt;p&gt;如果需要定期给浏览器推送数据，例如股票行情，或者不定期给浏览器推送数据，例如在线聊天，基于HTTP协议实现这类需求，只能依靠浏览器的JavaScript定时轮询，效率很低且实时性不高。&lt;/p&gt;&#xA;&lt;p&gt;2009年出现的新技术&lt;code&gt;Websocket&lt;/code&gt; 允许建立浏览器客户端和服务端之间的双向连接, 并且发送轻量级的数据模型, 服务端可以在需要时直接向客户端推送消息&lt;/p&gt;&#xA;&lt;p&gt;不同于传统的&lt;code&gt;Http&lt;/code&gt; ,&lt;code&gt;Websocket&lt;/code&gt;  允许建立通路, 可以直接发送信息而不需像HTTP一样创建连接上下文, 原理如下&lt;/p&gt;&#xA;&lt;p&gt;在建立TCP连接后, 附带几个请求头&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;/chat&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;1.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; www.example.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后连接升级为长连接&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.1 101 Switching Protocols&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade: websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection: Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;收到成功响应后表示WebSocket“握手”成功，这样，代表WebSocket的这个TCP连接将不会被服务器关闭，而是一直保持，服务器可随时向浏览器推送消息，浏览器也可随时向服务器推送消息。双方推送的消息既可以是文本消息，也可以是二进制消息，一般来说，绝大部分应用程序会推送基于JSON的文本消息。&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用-websocket&#34;&gt;使用 Websocket&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8-websocket&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;开始前阅读 &lt;a href=&#34;content/en/docs/Advanced/_index.md&#34;&gt;架构说明&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;建立新模块 &lt;code&gt;sample-ws&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- ws --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动类&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;/**  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * 描述：程序启动入口  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; *  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @author hamhuo  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @version 1.0.0  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; */&lt;/span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@SpringBootApplication&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableBinding&lt;/span&gt;(Sink.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;WsApplication&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;[]&lt;/span&gt; args) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;run&lt;/span&gt;(WsApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;, args);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现服务端和浏览器的双向通信, 我们要写一个服务器&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
