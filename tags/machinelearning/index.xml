<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MachineLearning on 海阔集</title>
    <link>https://hamhuo.xyz/tags/machinelearning/</link>
    <description>Recent content in MachineLearning on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/tags/machinelearning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A simple network to classify handwritten digits</title>
      <link>https://hamhuo.xyz/graphicsai/simpleclassifynet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/simpleclassifynet/</guid>
      <description>&lt;p&gt;OK, let&amp;rsquo;s get into the real problem  handwriting recognition&lt;/p&gt;&#xA;&lt;p&gt;First, we&amp;rsquo;d like a way of breaking an image containing many digits into a sequence of separate images, each containing a single digit.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308021049829.png&#34; alt=&#34;image.png&#34;&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308021056145.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll focus on writing a program to solve the second problem&lt;/p&gt;&#xA;&lt;p&gt;We do this because it turns out that the segmentation problem is not so difficult to solve, once you have a good way of classifying individual digits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning with gradient descent</title>
      <link>https://hamhuo.xyz/graphicsai/gradientdescent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/gradientdescent/</guid>
      <description>&lt;p&gt; &lt;em&gt;&lt;strong&gt;our goal in training a neural network is to find weights and biases which minimize the quadratic cost function C(w,b)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We already kown how neural network is functioned. an input layer and outputlayer and hidden layer.&lt;/p&gt;&#xA;&lt;p&gt;To let network learn itself, we need some data. Like digits&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250312200233941.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Actually, these digits come from a well-known training dataset called the &lt;strong&gt;MNIST dataset&lt;/strong&gt;, which contains tens of thousands of scanned images of handwritten digits along with their correct classifications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neutral Network</title>
      <link>https://hamhuo.xyz/graphicsai/neunet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/neunet/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;refer:&#xA;&lt;a href=&#34;http://neuralnetworksanddeeplearning.com/chap1.html&#34;&gt;Using neural nets to recognize handwritten digits&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;patience in the face of such frustration is the only way to truly understand and internalize a subject.&lt;/strong&gt;&lt;/em&gt;  FIND YOUR PROJECT&lt;/p&gt;&#xA;&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#overview&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;h6 id=&#34;recognize-hand-digits&#34;&gt;recognize hand digits&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#recognize-hand-digits&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;Let&amp;rsquo;s start from a basic task,  recognize those digits&#xA; we don&amp;rsquo;t usually appreciate how tough a problem our visual systems solve.&#xA; &#xA; write a computer program to recognize digits like those above&#xA; &#xA; try to make such rules precise will got tou confuse&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quick Start</title>
      <link>https://hamhuo.xyz/graphicsai/torch/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/torch/start/</guid>
      <description>&lt;p&gt;PyTorch is an open-source deep learning framework that’s known for its flexibility and ease-of-use.&lt;/p&gt;&#xA;&lt;h5 id=&#34;python-grammer&#34;&gt;Python Grammer&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#python-grammer&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;understand that as a playground with instructure.&#xA;define a function use &lt;em&gt;&lt;strong&gt;def&lt;/strong&gt;&lt;/em&gt; , function in python can return multiable values&#xA;no need of type &lt;em&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In python list is reinitializable, and turple is fixed and unchangable&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81c8be&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;math&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;move&lt;/span&gt;(x, y, step, angle&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nx &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;+&lt;/span&gt; step &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;cos(angle)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ny &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;-&lt;/span&gt; step &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;sin(angle)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;return&lt;/span&gt; nx, ny&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x, y &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; move(&lt;span style=&#34;color:#ef9f76&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;60&lt;/span&gt;, math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;pi &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;6&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;print&lt;/span&gt;(x, y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;151.96152422706632&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;70.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A huge improve is Python supports default para. In tons of value need to write value, we can ignore the fixed values and only trans uniqe ones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The architecture of neural networks</title>
      <link>https://hamhuo.xyz/graphicsai/archofneunet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/archofneunet/</guid>
      <description>&lt;p&gt;neural network have three layers , input layer , output layer and &amp;rsquo;not an input or output layer&#39;&lt;/p&gt;&#xA;&lt;p&gt;again, we have an network&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308014518176.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;the leftmost layer is input neurons the rightmost is outputneurons&#xA;The middle layer is called a &lt;em&gt;hidden layer&lt;/em&gt; t really means nothing more than &amp;ldquo;not an input or an output&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;input and output often strightforword, while there is often an art to the design of the hidden layers.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
