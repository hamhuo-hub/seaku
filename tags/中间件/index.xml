<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on 海阔集</title>
    <link>https://hamhuo.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content in 中间件 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastDFS分布式存储</title>
      <link>https://hamhuo.xyz/java/advanced/fastdfs/fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/fastdfs/fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h4 id=&#34;为什么需要文件服务器&#34;&gt;为什么需要文件服务器?&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e6%96%87%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;浏览器请求可能会携带头像文件, 服务器处理后存储在本地磁盘&lt;/p&gt;&#xA;&lt;p&gt;但是假如还有一个服务需要操作订单&lt;/p&gt;&#xA;&lt;p&gt;那么就需要异步从存储头像拿头像&lt;/p&gt;&#xA;&lt;p&gt;也就是说用户信息业务崩溃后, 导致订单服务器也一并崩溃&lt;/p&gt;&#xA;&lt;p&gt;为了解耦合, 我们把文件存储到专门的服务器里, 保证系统稳定&lt;/p&gt;&#xA;&lt;p&gt;当用户在订单管理修改信息后, 还需要同步到用户信息服务器&lt;/p&gt;&#xA;&lt;p&gt;这需要传递两次, 还要保证一致性, 倒不如直接把服务器分离, 只传递文件地址&#xA;这样就可以减少服务间的传递, 而且也不需要传递大尺寸的文件, 只要传链接就可以&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用&#34;&gt;使用&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;检查nacos配置&#xA;第三方服务&lt;/p&gt;&#xA;&lt;p&gt;下载地址是由nginx管理的, 所以还需要nginx配置&lt;/p&gt;&#xA;&lt;p&gt;注入fastdfs客户端&#xA;配置文件服务器url 也就是 nginx的IP地址&lt;/p&gt;&#xA;&lt;p&gt;上传文件&#xA;传入 MultipatFile file&#xA;首先提取后缀名, 左闭右开去掉点放到新的子串&#xA;直接调客户端上传即可&#xA;用户回显, 是否上传成功, 看有没有文件信息就可以&lt;/p&gt;&#xA;&lt;p&gt;下载&#xA;也就是响应文件, 创建响应实体内部放字节流&#xA;调客户端下载, 传入group组和文件id&#xA;下载完成的文件命名, 用时间就可以&#xA;定义好的名字回传道响应的响应头&lt;/p&gt;&#xA;&lt;p&gt;删除文件&#xA;还是组和文件id&#xA;调客户端删除&#xA;回调是int值, 匹配定义的预设输出传回即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>FastExcel报表组件</title>
      <link>https://hamhuo.xyz/java/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/fastexcel%E6%8A%A5%E8%A1%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;提前封装好一些服务&lt;/p&gt;&#xA;&lt;h4 id=&#34;快速导入&#34;&gt;快速导入&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%af%bc%e5%85%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;组件扫描&lt;/p&gt;&#xA;&lt;p&gt;写一个单元测试&#xA;导入excel客户端&#xA;生成excle&#xA;新建一个数组&#xA;调用导入功能&lt;/p&gt;&#xA;&lt;p&gt;解析&#xA;传入文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nacos配置中心</title>
      <link>https://hamhuo.xyz/java/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
      <description></description>
    </item>
    <item>
      <title>RocketMQ</title>
      <link>https://hamhuo.xyz/java/advanced/rocktmq/rocketmq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/rocktmq/rocketmq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;了解: &lt;a href=&#34;WebSocket.md&#34;&gt;WebSocket&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;学习过 &lt;code&gt;websocekt&lt;/code&gt; 后, 我们知道通过建立长连接可以实现 服务器和浏览器的双向推送&#xA;通过浏览器协调, 可以实现端对端的通信&#xA;&lt;code&gt;webServer&lt;/code&gt; 初始化一个 Session 池作为核心容器, 当 &lt;code&gt;webServer&lt;/code&gt; 在分布式中作为服务注入时, 其他服务也要调用消息怎么办?&lt;/p&gt;&#xA;&lt;p&gt;可以让其他服务作为消费者, 让服务生产消息, 但是&lt;code&gt;webserver&lt;/code&gt; 一旦负责消息通讯和消息生产职责就不再单一, 需要解耦&lt;/p&gt;&#xA;&lt;p&gt;长连接传递的消息是即时的, 一旦连接断开消息就会丢失, 我们需要一个方法持久化消息&lt;/p&gt;&#xA;&lt;p&gt;长连接会阻塞服务线程, 建立连接后双方不得不占用一个线程持续的监听, 需要把监听的任务解耦出去. 一旦并发消息过多, 服务器可能会崩溃&lt;/p&gt;&#xA;&lt;p&gt;综上, 我们有了消息队列&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步通信&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中的应用程序需要异步通信时，可以使用消息中间件来实现。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在一个电商系统中，订单系统下单后需要给库存系统发送异步消息，以减少系统之间的耦合，避免同步调用导致的性能问题或响应延迟。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;减少耦合&lt;/strong&gt;：系统可以在不等待响应的情况下继续进行其他操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统性能&lt;/strong&gt;：减少了同步阻塞，提高了响应速度。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用解耦&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当应用程序需要进行松耦合的通信时，可以使用消息中间件来实现。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在微服务架构中，不同服务之间可以通过消息中间件进行通信，避免直接调用服务导致的依赖关系过强。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;降低耦合度&lt;/strong&gt;：服务之间通过消息中间件进行通信，不需要直接调用，提高系统的灵活性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;增强可维护性&lt;/strong&gt;：服务之间的更新和维护不影响其他服务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息排队&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中需要处理大量的消息时，可以使用消息中间件来实现消息排队，确保消息的顺序和可靠性。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在金融行业中，需要处理大量的交易消息，消息中间件可以实现消息排队，确保每笔交易都得到正确处理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证消息顺序&lt;/strong&gt;：确保按顺序处理每条消息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息可靠性&lt;/strong&gt;：即使出现系统故障，未处理的消息仍然可以从队列中恢复。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统需要处理大量的请求时，可以使用消息中间件来实现负载均衡。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在电商系统中，订单系统下单请求可以通过消息中间件发送到多个库存系统中，从而实现负载均衡。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分担负载&lt;/strong&gt;：通过将消息分发到多个消费者，实现负载均衡，避免单点压力。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统吞吐量&lt;/strong&gt;：通过多节点并发处理提高系统处理能力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统削峰填谷&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景描述&lt;/strong&gt;：当系统中出现高峰期时，可以使用消息中间件来平滑处理请求。&lt;br&gt;&#xA;&lt;strong&gt;示例&lt;/strong&gt;：在电商系统中，双十一等促销活动可能会导致系统请求量急剧增加，消息中间件可以通过缓存请求，避免系统崩溃。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;平滑流量&lt;/strong&gt;：在高峰期通过消息队列缓存请求，避免系统过载。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高系统稳定性&lt;/strong&gt;：避免高并发请求导致的性能瓶颈或服务崩溃。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;使用-rocketmq&#34;&gt;使用 &lt;code&gt;RocketMQ&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8-rocketmq&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;并发环境下的消息队列用阿里提供的 &lt;code&gt;RocketMQ&lt;/code&gt; 合适&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;server&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;port&lt;/span&gt;: ${sp.publish}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;spring&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;application&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;name&lt;/span&gt;: ${sn.publish}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;cloud&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;stream&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;rocketmq&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;binder&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;name-server&lt;/span&gt;: ${rocket-mq.name-server}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;bindings&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;output&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;producer&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;group&lt;/span&gt;: socketGroup  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;sync&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;true&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;bindings&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;output&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;destination&lt;/span&gt;: test-topic  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;content-type&lt;/span&gt;: application/json  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;#开启MQ的日志  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;logging&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;level&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;com&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ca9ee6&#34;&gt;alibaba&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;cloud&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ca9ee6&#34;&gt;stream&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;binder&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ca9ee6&#34;&gt;rocketmq&lt;/span&gt;: DEBUG&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;项目依赖&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
