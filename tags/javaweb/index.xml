<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaWeb on 海阔集</title>
    <link>https://hamhuo.xyz/tags/javaweb/</link>
    <description>Recent content in JavaWeb on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/tags/javaweb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWeb</title>
      <link>https://hamhuo.xyz/docs/basic/javaweb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/basic/javaweb/</guid>
      <description>&lt;p&gt;内容来源:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;沉默王二 GitHub 上开源的知识库《&lt;a href=&#34;https://github.com/itwanger/toBeBetterJavaer&#34;&gt;Java 进阶之路&lt;/a&gt;》&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Servlet</title>
      <link>https://hamhuo.xyz/docs/basic/javaweb/servlet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/basic/javaweb/servlet/</guid>
      <description>&lt;p&gt;Servlet 是整个JavaWeb的核心&lt;/p&gt;&#xA;&lt;p&gt;当请求传入服务器后, 服务器会交给一个&lt;code&gt;Servlet&lt;/code&gt; 处理, 该 &lt;code&gt;Servlet&lt;/code&gt; 可以根据请求生成动态的内容&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询数据库，&lt;/li&gt;&#xA;&lt;li&gt;处理表单数据，&lt;/li&gt;&#xA;&lt;li&gt;返回动态生成的 HTML 页面，&lt;/li&gt;&#xA;&lt;li&gt;或者返回 JSON 数据供前端使用等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;之后 &lt;code&gt;Servlet&lt;/code&gt; 会生成响应, 比如 HTML 或者 Json返回浏览器&lt;/p&gt;&#xA;&lt;p&gt;感性认识: &lt;code&gt;Servlet&lt;/code&gt; 像是一个组件, 其中Java服务器使用的 &lt;code&gt;Servlet&lt;/code&gt; 负责生成动态内容(请求处理), 其他 &lt;code&gt;Servlet&lt;/code&gt; 负责处理静态资源, 错误页面等&lt;/p&gt;&#xA;&lt;p&gt;举个例子：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果你访问一个静态页面（如 &lt;code&gt;index.html&lt;/code&gt;），Tomcat 会将这个静态页面直接返回给你。这就跟后端服务器没关系了, 直接在 &lt;code&gt;Tomcat&lt;/code&gt; 中的某一个 Servlet 就能完成&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果你访问一个动态页面（如使用 Spring MVC 的控制器来处理请求），Tomcat 会将请求交给 &lt;code&gt;DispatcherServlet&lt;/code&gt;，然后 &lt;code&gt;DispatcherServlet&lt;/code&gt; 会找到相应的 &lt;code&gt;Controller&lt;/code&gt;，&lt;code&gt;Controller&lt;/code&gt; 会生成一些数据，交给视图解析器，将模板与数据结合，最后生成一个完整的 HTML 页面。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://hamhuo.xyz/docs/advanced/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/docs/advanced/websocket/</guid>
      <description>&lt;p&gt;如果需要定期给浏览器推送数据，例如股票行情，或者不定期给浏览器推送数据，例如在线聊天，基于HTTP协议实现这类需求，只能依靠浏览器的JavaScript定时轮询，效率很低且实时性不高。&lt;/p&gt;&#xA;&lt;p&gt;2009年出现的新技术&lt;code&gt;Websocket&lt;/code&gt; 允许建立浏览器客户端和服务端之间的双向连接, 并且发送轻量级的数据模型, 服务端可以在需要时直接向客户端推送消息&lt;/p&gt;&#xA;&lt;p&gt;不同于传统的&lt;code&gt;Http&lt;/code&gt; ,&lt;code&gt;Websocket&lt;/code&gt;  允许建立通路, 可以直接发送信息而不需像HTTP一样创建连接上下文, 原理如下&lt;/p&gt;&#xA;&lt;p&gt;在建立TCP连接后, 附带几个请求头&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;/chat&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;1.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; www.example.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;:&lt;/span&gt; Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后连接升级为长连接&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.1 101 Switching Protocols&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade: websocket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection: Upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;收到成功响应后表示WebSocket“握手”成功，这样，代表WebSocket的这个TCP连接将不会被服务器关闭，而是一直保持，服务器可随时向浏览器推送消息，浏览器也可随时向服务器推送消息。双方推送的消息既可以是文本消息，也可以是二进制消息，一般来说，绝大部分应用程序会推送基于JSON的文本消息。&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用-websocket&#34;&gt;使用 Websocket&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8-websocket&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;开始前阅读 &lt;a href=&#34;https://hamhuo.xyz/docs/advanced/&#34;&gt;架构说明&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;建立新模块 &lt;code&gt;sample-ws&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;&amp;lt;!-- ws --&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动类&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;/**  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * 描述：程序启动入口  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; *  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @author hamhuo  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; * @version 1.0.0  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt; */&lt;/span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@SpringBootApplication&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableBinding&lt;/span&gt;(Sink.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;WsApplication&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;[]&lt;/span&gt; args) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;run&lt;/span&gt;(WsApplication.&lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;, args);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现服务端和浏览器的双向通信, 我们要写一个服务器&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
