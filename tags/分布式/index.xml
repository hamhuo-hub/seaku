<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on 海阔集</title>
    <link>http://localhost:1313/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nacos配置中心</title>
      <link>http://localhost:1313/docs/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
      <description></description>
    </item>
    <item>
      <title>RocketMQ</title>
      <link>http://localhost:1313/docs/advanced/rocketmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/rocketmq/</guid>
      <description></description>
    </item>
    <item>
      <title>TTL</title>
      <link>http://localhost:1313/docs/advanced/transmittablethreadlocalttl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/transmittablethreadlocalttl/</guid>
      <description>&lt;p&gt;&lt;code&gt;TransmittableThreadLocal&lt;/code&gt; (TTL) 是增强版的 &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;ThreadLocal&#34;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/docs/advanced/intercepter%E6%8B%A6%E6%88%AA%E5%99%A8/&#34;&gt;拦截器&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;实现ttl&#34;&gt;实现&lt;code&gt;TTL&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e7%8e%b0ttl&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;流程图如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250216213034195.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前置:&#xA;&lt;a href=&#34;http://localhost:1313/docs/advanced/%E7%BD%91%E5%85%B3gateway/&#34;&gt;网关Gateway&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;上半部分业务为用户请求登录并返回&lt;code&gt;Token&lt;/code&gt; 该业务从MVC剥离, 设置在网关进行&lt;/p&gt;&#xA;&lt;p&gt;我们主要关注下半部分, 用户携带 &lt;code&gt;Token&lt;/code&gt; 后如何在服务层获取用户信息&lt;/p&gt;&#xA;&lt;p&gt;整体流程为:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户登录请求&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户通过提交用户名和密码进行登录，经过网关的认证，认证服务（如 &lt;code&gt;Auth&lt;/code&gt;）验证用户身份并生成 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;登录请求返回 &lt;code&gt;token&lt;/code&gt; 给用户，用户保存 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续请求携带 Token 登录&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户在后续请求中携带该 &lt;code&gt;token&lt;/code&gt;，这个 &lt;code&gt;token&lt;/code&gt; 用于证明用户的身份。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Nginx 负载均衡&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求首先被发送到 &lt;code&gt;Nginx&lt;/code&gt;，Nginx 会根据负载均衡策略将请求转发到具体的 &lt;strong&gt;网关&lt;/strong&gt;（&lt;code&gt;Gateway&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网关鉴权&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网关负责根据请求中的 &lt;code&gt;token&lt;/code&gt; 进行 &lt;strong&gt;鉴权&lt;/strong&gt;，验证该 &lt;code&gt;token&lt;/code&gt; 是否有效。如果验证通过，网关会继续转发请求；如果验证失败，则拒绝请求或重定向至登录页面。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;拦截器将用户信息放入 TTL&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在请求经过网关后，网关会调用拦截器（如 &lt;code&gt;HeaderInterceptor&lt;/code&gt;）。拦截器会提取请求中的用户信息（如 &lt;code&gt;token&lt;/code&gt; 解密后的用户信息），然后将这些信息存放到 &lt;strong&gt;TTL&lt;/strong&gt;（Thread-Local）中。&lt;/li&gt;&#xA;&lt;li&gt;TTL 是一种线程局部存储机制，用于在当前线程内传递数据，确保在同一请求的生命周期内，后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt; 等）能够访问到这些用户信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;后续服务从 TTL 获取用户信息&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;后续的服务（如 &lt;code&gt;ProjectService&lt;/code&gt;）可以通过访问当前线程的 &lt;strong&gt;TTL&lt;/strong&gt; 中的数据来获取用户信息，而无需每次都从请求中提取或解析 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们所关注的 TTL 在拦截器里实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>网关Gateway</title>
      <link>http://localhost:1313/docs/advanced/%E7%BD%91%E5%85%B3gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/advanced/%E7%BD%91%E5%85%B3gateway/</guid>
      <description>&lt;h4 id=&#34;什么是网关&#34;&gt;什么是网关&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bd%91%e5%85%b3&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;网关负责路由请求、负载均衡、安全认证、流量控制、监控和日志记录等任务。&lt;/p&gt;&#xA;&lt;p&gt;我的理解是, 网关是请求真正进入服务前的过滤, 管理, 控制(重定向), 可以理解为保安大哥&lt;/p&gt;&#xA;&lt;p&gt;网关的结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;路由&#xA;网关的基本模块, 由断言和过滤器组成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;断言&#xA;匹配规则, 当请求路径匹配时允许路由到相关服务&#xA;实现一组匹配规则，让请求找到对应的 Route 进行处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;过滤器&#xA;响应式的过滤器链, 实现请求的过滤&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局过滤器&#xA;全局过滤器作用于所有的路由，不需要单独配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212093859168.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;客户端发起请求, 由 &lt;code&gt;Gateway Handler Mapping&lt;/code&gt;&#xA;接收, 这里执行断言并路由到 &lt;code&gt;Gateway Web Handler&lt;/code&gt; 这里做过滤链, 过滤请求, 最后传递给服务&#xA;过滤器可以在执行前和执行后回调&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等;&lt;/p&gt;&#xA;&lt;p&gt;在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解:&#xA;&lt;a href=&#34;http://localhost:1313/docs/advanced/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8Breactor%E5%BA%93/&#34;&gt;响应式编程&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;过滤器&#34;&gt;过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;过滤器是由 &lt;code&gt;Servlet&lt;/code&gt; 容器管理的, 也就是说初始化&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250217183936830.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;自定义网关实现全局过滤器&#34;&gt;自定义网关实现全局过滤器&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bd%91%e5%85%b3%e5%ae%9e%e7%8e%b0%e5%85%a8%e5%b1%80%e8%bf%87%e6%bb%a4%e5%99%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;网关选型&lt;code&gt;SpringCloudGateway&lt;/code&gt; 这是目前比较新的选择&lt;/p&gt;&#xA;&lt;p&gt;模板工程基于 &lt;code&gt;pmhub&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;新建自定义的全局过滤器&lt;/p&gt;&#xA;&lt;p&gt;全局过滤器需要实现 &lt;code&gt;GlobalFilter&lt;/code&gt;&#xA;过滤器需要确定执行顺序, 实现&lt;code&gt;Order&lt;/code&gt; 接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee;font-weight:bold&#34;&gt;@Component&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;AuthFilter&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;implements&lt;/span&gt; GlobalFilter, Ordered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该过滤器实现如下功能&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;请求耗时记录&lt;/li&gt;&#xA;&lt;li&gt;白名单过滤&lt;/li&gt;&#xA;&lt;li&gt;Token鉴权&lt;/li&gt;&#xA;&lt;li&gt;日志输出&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;请求耗时记录:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
