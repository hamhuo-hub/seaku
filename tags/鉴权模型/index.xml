<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>鉴权模型 on 海阔集</title>
    <link>https://hamhuo.xyz/tags/%E9%89%B4%E6%9D%83%E6%A8%A1%E5%9E%8B/</link>
    <description>Recent content in 鉴权模型 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/tags/%E9%89%B4%E6%9D%83%E6%A8%A1%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JWT与Session</title>
      <link>https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/</guid>
      <description>&lt;p&gt;作为令牌格式, JWT 和 session 在用户认证上时常用到&lt;/p&gt;&#xA;&lt;h4 id=&#34;session&#34;&gt;Session&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#session&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;经典的 &lt;code&gt;Session&lt;/code&gt; 登录流程如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户向服务器发送用户名和密码。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户随后的每一次请求，都会通过 Cookie，将 &lt;code&gt;session_id&lt;/code&gt; 传回服务器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;单机环境下, session 实现简单, 方便快速, 服务器维护与用户的连接(下称 &lt;code&gt;Sesssion&lt;/code&gt;), 用户传入 id 来更新session&lt;/p&gt;&#xA;&lt;p&gt;但是分布式集群下, 各个服务需要不断的请求并写入session, 这使得session服务器成为了登录中心服务器, 一旦中心服务器挂了, 整个分布应用宕机&lt;/p&gt;&#xA;&lt;p&gt;既然服务器维护session成本这么高, 干脆不维护了, 让用户维护&lt;/p&gt;&#xA;&lt;p&gt;于是诞生了 JWT&lt;/p&gt;&#xA;&lt;h4 id=&#34;jwt&#34;&gt;JWT&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#jwt&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;角色&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;管理员&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;&amp;#34;到期时间&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;2018年7月1日0点0分&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2认证</title>
      <link>https://hamhuo.xyz/java/advanced/oauth2%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/java/advanced/oauth2%E8%AE%A4%E8%AF%81/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/OAuth&#34;&gt;OAuth&lt;/a&gt;是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。&lt;/p&gt;&#xA;&lt;h4 id=&#34;为什么需要-oauth&#34;&gt;为什么需要 &lt;code&gt;OAuth&lt;/code&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81-oauth&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;以网易云音乐云村账号登录为例&lt;/p&gt;&#xA;&lt;p&gt;传统的用户授权方式是&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户输入用户名密码&lt;/li&gt;&#xA;&lt;li&gt;服务器验证密码, 这里需要存储用户密码到本地&lt;/li&gt;&#xA;&lt;li&gt;返回session/token&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这对于单一服务没什么问题, 因为用户敏感信息和服务都是由网易云存储并提供的&lt;/p&gt;&#xA;&lt;p&gt;但是网易云也支持qq登录&lt;/p&gt;&#xA;&lt;p&gt;按照常识, 用户不会把qq密码提供给网易, 没别的意思, 就是不合逻辑&#xA;那么上述流程就存在问题了&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网易云为了实现qq登录, 不得不保存qq用户信息并部署qq密码登录&lt;/li&gt;&#xA;&lt;li&gt;网易获得了登录用户qq的权限&lt;/li&gt;&#xA;&lt;li&gt;qq密码权限范围被意外扩大了, 现在不止腾讯, 网易也可以获取密码了, 被破解的几率增加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以我们需要在网易和腾讯之间设置一个转换层, 密码在腾讯处理, 通过转换层把令牌交给网易&lt;/p&gt;&#xA;&lt;h4 id=&#34;角色介绍&#34;&gt;角色介绍&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%a7%92%e8%89%b2%e4%bb%8b%e7%bb%8d&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;OAuth 就是这样的一种协议&lt;/p&gt;&#xA;&lt;p&gt;此协议定义了四种角色&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端/客户, 一个应用程序发出 API 请求对受保护资源执行一些行为，而这些行为是经过资源拥有授权的&lt;/li&gt;&#xA;&lt;li&gt;资源拥有者Resource owner)：通常是一个应用的用户，也是资源拥有者，它拥有授予访问在资源 服务器上的资源&lt;/li&gt;&#xA;&lt;li&gt;授权服务器Authorization server)：当前授权服务器从资源拥有者达成共识时，它会发放访问令牌 给客户以允许访问在资源服务器上的受保护的资源 。比较小的 API 提供商可能会使用相同的应用和 URL空间作为授权服务器和资源服务器&lt;/li&gt;&#xA;&lt;li&gt;资源服务器Resource server)：该服务器是用户拥有资源的服务器，它是受 一般我们叫做 OAuth 保护的服务器。 API 提供商，因为它拥有受保护的数据，比如图片、视频、日历或者合同等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250302235946977.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;OAuth  的优点包括简化了用户授权流程，提高了安全性，允许用户选择性地授权资源访问，并支持多 种授权方式（如授权码模式、密码模式、客户端模式等）。它广泛应用于各种互联网应用程序中，例如第 三方登录、 API 访问授权等场景。&lt;/p&gt;&#xA;&lt;h4 id=&#34;实践--spring-cloud-gateway--密码模式的-oauth2-授权模型&#34;&gt;实践:  Spring Cloud GateWay + 密码模式的 OAuth2 授权模型&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%ae%9e%e8%b7%b5--spring-cloud-gateway--%e5%af%86%e7%a0%81%e6%a8%a1%e5%bc%8f%e7%9a%84-oauth2-%e6%8e%88%e6%9d%83%e6%a8%a1%e5%9e%8b&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hamhuo.xyz/java/advanced/gateway%E7%BD%91%E5%85%B3/&#34;&gt;网关&lt;/a&gt;, &lt;a href=&#34;https://hamhuo.xyz/java/advanced/jwt%E4%B8%8Esession/&#34;&gt;JWT与Session&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
