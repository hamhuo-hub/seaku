<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>海阔知识库 on 海阔集</title>
    <link>https://hamhuo.xyz/</link>
    <description>Recent content in 海阔知识库 on 海阔集</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://hamhuo.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2月10日</title>
      <link>https://hamhuo.xyz/dairy/2%E6%9C%8810%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/2%E6%9C%8810%E6%97%A5/</guid>
      <description>&lt;p&gt;知识网络的构建非常有效&#xA;完成了知识体系梳理, 让知识点之间互相联系, 达到互相补充的目的, 达到系统性学习的要求&#xA;使用Obisidian后完成单元的时间从1个月缩短至5天&lt;/p&gt;&#xA;&lt;p&gt;目前的问题:&#xA;在知识点构建过程会引用未知知识点, 如果使用深度优先策略会导致单个知识点构建时间过长&#xA;使用广度优先策略会导致知识点构建不充分, 导致难以理解甚至错误&lt;/p&gt;&#xA;&lt;p&gt;todo:&#xA;找到构建知识点的策略&lt;/p&gt;&#xA;&lt;p&gt;待实践:&#xA;层次递进法（分层次学习）&lt;/p&gt;&#xA;&lt;p&gt;先广度遍历建立基础，再针对难点深度学习。&#xA;先粗略标注知识点（例如在 Obsidian 中使用标签），然后逐步填充内容。&#xA;设定“&lt;em&gt;&lt;strong&gt;深度阈值&lt;/strong&gt;&lt;/em&gt;”，例如最多深入两层，避免陷入细节漩涡。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;关键路径法（关键知识点优先）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;找出知识体系中的核心概念（如“动机图”或“概念网络”），优先构建这些关键点。&#xA;采用“知识辐射”策略，从&lt;em&gt;&lt;strong&gt;核心知识点&lt;/strong&gt;&lt;/em&gt;向外扩展，保证整体理解不受阻碍。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;自适应探索法（按难度动态调整）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在学习过程中动态调整策略：遇到理解困难时，切换为局部深度探索，否则维持广度推进。&#xA;利用&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;问题驱动学习（Problem-Based Learning, PBL），遇到卡点时再深入，而非预先穷举所有相关知识。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;时间配额法（限制单个知识点时间）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;设定时间上限，例如每个&lt;em&gt;&lt;strong&gt;知识点最多20分钟&lt;/strong&gt;&lt;/em&gt;，如果仍有未解决的问题，则标记为“待深入”，后续再集中攻克。&#xA;通过设定学习周期（如“5天初步构建，10天复盘深化”）来避免单点耗时过多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2月11日</title>
      <link>https://hamhuo.xyz/dairy/2%E6%9C%8811%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/2%E6%9C%8811%E6%97%A5/</guid>
      <description>&lt;p&gt;太忙了, 忘记写日志了&lt;/p&gt;&#xA;&lt;p&gt;实践了&lt;code&gt;层次递进法&lt;/code&gt; 将任务量缩减分层遍历任务, 逐层深入, 在一天完成了&lt;code&gt;MySQL&lt;/code&gt; 模块的整体结构&lt;/p&gt;&#xA;&lt;p&gt;归纳如下, 遍历层数限制为2层, 当知识点层数超过2层时采取两种策略&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AI 归纳, 减少搜索深度&lt;/li&gt;&#xA;&lt;li&gt;放弃, 继续广度学习&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;第一种策略很好理解, AI将深度的理论归纳为表层结果, 减少厚度&lt;/p&gt;&#xA;&lt;p&gt;第二种策略的理论基础是, 知识点并非树状而是网状结构&lt;/p&gt;&#xA;&lt;p&gt;并发编程下有子节点&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212163428470.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;子节点下还有 &lt;code&gt;孙&lt;/code&gt; 节点&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212163437158.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这看起来是层层递进的树结构, 但是总体来看:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212163553822.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是一张网络, 当广度搜索时原先的节点在不同的搜索区域会&lt;code&gt;升级&lt;/code&gt;, 从子节点升级为父节点, 从而达到&#xA;缩小厚度的结果&lt;/p&gt;&#xA;&lt;p&gt;比如搜索路径 并发编程&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212164020208.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时 &lt;code&gt;AQS&lt;/code&gt; 是第三层节点, 学习自旋锁和CLH锁时就应该放弃&lt;/p&gt;&#xA;&lt;p&gt;放弃后转为广度搜索, 开始遍历之前的二级节点&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212164241043.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时在广度搜索基础上, &lt;code&gt;AQS&lt;/code&gt; 自动降级了, 通俗来讲就是学习AQS的基础打牢了, 可以将任意的二级节点作为基础向下遍历了&lt;/p&gt;&#xA;&lt;p&gt;上述可知, 层级学习的核心是广度搜索结合深度搜索, 前提是有系统的学习路径, 思想是逐层递进, 优先搭建网络, 之后丰满节点&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;阅读:&lt;/p&gt;&#xA;&lt;p&gt;***问题驱动学习（Problem-Based Learning, PBL）&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>2月19日</title>
      <link>https://hamhuo.xyz/dairy/2%E6%9C%8819%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/2%E6%9C%8819%E6%97%A5/</guid>
      <description>&lt;p&gt;站点成功注册到google&#xA;其中几个要点&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;默认的 hugo server 指令会在所有页面拒绝索引, 要使用 hugo &amp;ndash;gc 或者 hugo&lt;/li&gt;&#xA;&lt;li&gt;google收录的sitemap有一个陈年bug, 站点地图必须使用双斜线并且末尾加斜线&lt;/li&gt;&#xA;&lt;li&gt;百度收录推荐用www但是加上前缀会导致跳转, 盲猜是个bug&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>2月20日</title>
      <link>https://hamhuo.xyz/dairy/2%E6%9C%8820%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/2%E6%9C%8820%E6%97%A5/</guid>
      <description>&lt;p&gt;项目开始了&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;高兴 加入了天才噜噜噜的群&lt;/li&gt;&#xA;&lt;li&gt;高兴 redis缓存一致模型我一个人搞出来了&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>2月27日</title>
      <link>https://hamhuo.xyz/dairy/2%E6%9C%8827%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/2%E6%9C%8827%E6%97%A5/</guid>
      <description>&lt;p&gt;尝试投递了第一批简历, 0面试&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;太着急了, 八股, 力扣没有准备充分, 但是这个不是主要原因&lt;/li&gt;&#xA;&lt;li&gt;主要原因是简历的问题, 拷打业务准备不充分&#xA;解决:&lt;/li&gt;&#xA;&lt;li&gt;10天冲刺计划&#xA;计划:&#xA;- 个人端口完成 2/28&#xA;- 简历完成 2/27&#xA;- 每日力扣 两题, 只做热门题 10天 两遍&#xA;- 面渣背诵加上热门50题 10天 两遍&#xA;- 小组模块完成 3天&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>3月14日</title>
      <link>https://hamhuo.xyz/dairy/3%E6%9C%8814%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/3%E6%9C%8814%E6%97%A5/</guid>
      <description>&lt;p&gt;在接收他人观点之前首先明确自己的观点&#xA;否则会被PUA, 他人强加的观点是立不住脚的, 无论表述上是否符合客观事实, 缺少论证的观点任何人都可以拒绝接受&#xA;日常生活中不需要十分谨慎的判断其他人说的每句话, 只要小心反问,诘问具有强烈感情的观点就好&#xA;比如&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;你不现在开始学, 难道是不打算保研了吗?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;交了这么多钱, 还没办法出国, 你不就是败家吗!&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;呵, 瞎忙活些什么, 一天天的就知道卷, 把宿舍风气都败坏了&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;哼, 早告诉你,你成不了事~&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于这些感情色彩强烈的表述, 抛去客观情况不论, 首先立场上就不应该接受, 作为平等个体, 在任何情况下抛出的观点一定是站在说话者自身立场上的. 我们没有任何理由接收他人立场上的观点,&lt;/p&gt;&#xA;&lt;p&gt;但是这存在例外. 只有非常了解某人实际生活和背景的人才能综合种种因素站在他人的立场上抛出观点(比如父母).&lt;/p&gt;&#xA;&lt;p&gt;对于干系至深之人所抛出的观点可能带有强烈感情色彩, 但在反驳之前请三思.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3月17日</title>
      <link>https://hamhuo.xyz/dairy/3%E6%9C%8817%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/3%E6%9C%8817%E6%97%A5/</guid>
      <description>&lt;h4 id=&#34;零-大学只有两件事-寻找对象和寻找自我-这两件事完成一件就很了不起&#34;&gt;零. 大学只有两件事, 寻找对象和寻找自我, 这两件事完成一件就很了不起&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%9b%b6-%e5%a4%a7%e5%ad%a6%e5%8f%aa%e6%9c%89%e4%b8%a4%e4%bb%b6%e4%ba%8b-%e5%af%bb%e6%89%be%e5%af%b9%e8%b1%a1%e5%92%8c%e5%af%bb%e6%89%be%e8%87%aa%e6%88%91-%e8%bf%99%e4%b8%a4%e4%bb%b6%e4%ba%8b%e5%ae%8c%e6%88%90%e4%b8%80%e4%bb%b6%e5%b0%b1%e5%be%88%e4%ba%86%e4%b8%8d%e8%b5%b7&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;h4 id=&#34;一-建议每个程序员都能搭建一个自己的博客&#34;&gt;一. 建议每个程序员都能搭建一个自己的博客&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%80-%e5%bb%ba%e8%ae%ae%e6%af%8f%e4%b8%aa%e7%a8%8b%e5%ba%8f%e5%91%98%e9%83%bd%e8%83%bd%e6%90%ad%e5%bb%ba%e4%b8%80%e4%b8%aa%e8%87%aa%e5%b7%b1%e7%9a%84%e5%8d%9a%e5%ae%a2&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;一个百度谷歌搜索你的名字就能访问的个人名片&lt;/p&gt;&#xA;&lt;p&gt;博客不需要多么复杂, 学习笔记, 生活感悟, 一些日常生活的灵感, 个人哲学都可以写到上面&lt;/p&gt;&#xA;&lt;h4 id=&#34;二-几个非常有用的网站&#34;&gt;二. 几个非常有用的网站&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%ba%8c-%e5%87%a0%e4%b8%aa%e9%9d%9e%e5%b8%b8%e6%9c%89%e7%94%a8%e7%9a%84%e7%bd%91%e7%ab%99&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    //到百度搜下什么叫&amp;#34;出国机场&amp;#34;&#xA;&#x9;1. https://github.com/goeep/tuijianvpn&#xA;&#xA;&#x9;//java语言 是缺少资源/实验室/学长的情况下最适合入门和找实习的语言, 因为网上教程多&#xA;&#x9;2. https://javabetter.cn/&#xA;&#x9;3. https://liaoxuefeng.com/?src=redirect&#xA;&#xA;&#x9;//推荐所有人学习python, 大致了解下也好&#xA;&#x9;4. https://liaoxuefeng.com/books/python/introduction/index.html&#xA;&#xA;&#x9;//大二的线代大一的高数好好听, 后续忘记了没关系, 这种思维模式会支撑你学习其他领域&#xA;&#x9;5. https://www.3blue1brown.com/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;三-对于希望实习的学弟&#34;&gt;三. 对于希望实习的学弟&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%89-%e5%af%b9%e4%ba%8e%e5%b8%8c%e6%9c%9b%e5%ae%9e%e4%b9%a0%e7%9a%84%e5%ad%a6%e5%bc%9f&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;来自学长的凉经&lt;/p&gt;&#xA;&lt;p&gt;雅思越早过越合适, 举个例子, 福建某985大三没有课程强制要求计院学生实习, 为什么? 因为厦大学生只用三年就可以修完所有学分并且专业技能达到职业标准. 这并不意味学校惨无人道, 这意味着公司秋招和春招是在大三进行的, 大一下就要开始确定方向并开始准备, 大二就要尝试实习, 大三正式拿到实习offer&lt;/p&gt;&#xA;&lt;p&gt;因此雅思越早完成就可以空出时间慢慢寻找自我&lt;/p&gt;&#xA;&lt;p&gt;四. 小心其他人突然抛出的观点&lt;/p&gt;</description>
    </item>
    <item>
      <title>3月25日</title>
      <link>https://hamhuo.xyz/dairy/3%E6%9C%8828%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/3%E6%9C%8828%E6%97%A5/</guid>
      <description>&lt;p&gt;进入任何新领域之前都应该先找教程, 先找视频教程, 而不是直接上手&lt;/p&gt;&#xA;&lt;h4 id=&#34;final-stage-4-9&#34;&gt;final stage 4-9&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#final-stage-4-9&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;h5 id=&#34;review-stage&#34;&gt;Review stage&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#review-stage&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;Review all java course&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Java se + se note + se interview&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Java web + web note + web interview&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;web Socket&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;gateway&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Spring MVC + mvc note + mvc interview&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Spring Boot + boot note + boot interview&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Spring cloud + cloud note + cloud interview&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Redis&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;microservice&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;MySQL&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>3月9日</title>
      <link>https://hamhuo.xyz/dairy/3%E6%9C%889%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/3%E6%9C%889%E6%97%A5/</guid>
      <description>&lt;p&gt;pdd和taotian笔试&#xA;不可谓不惨烈&lt;/p&gt;&#xA;&lt;p&gt;在原子的学习时间内必须有测试看到学习效果&lt;/p&gt;&#xA;&lt;p&gt;提问, 没有问题是不对的, 一定是不专心&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple network to classify handwritten digits</title>
      <link>https://hamhuo.xyz/graphicsai/simpleclassifynet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/simpleclassifynet/</guid>
      <description>&lt;p&gt;OK, let&amp;rsquo;s get into the real problem  handwriting recognition&lt;/p&gt;&#xA;&lt;p&gt;First, we&amp;rsquo;d like a way of breaking an image containing many digits into a sequence of separate images, each containing a single digit.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308021049829.png&#34; alt=&#34;image.png&#34;&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308021056145.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll focus on writing a program to solve the second problem&lt;/p&gt;&#xA;&lt;p&gt;We do this because it turns out that the segmentation problem is not so difficult to solve, once you have a good way of classifying individual digits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Computer Internet</title>
      <link>https://hamhuo.xyz/school/computerinternet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/computerinternet/</guid>
      <description>&lt;h4 id=&#34;url-uri&#34;&gt;URL, URI&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#url-uri&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;We have to deal with URLs every day. URL is an acronym that stands for &lt;em&gt;Uniform Resource Locator&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;you can simply call it &lt;em&gt;address&lt;/em&gt;. It&amp;rsquo;s used as a string that denotes the location of a given resource on the Internet: a web page, an image, a mailbox, etc.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250212103958534.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;What Is a URI?&lt;/p&gt;&#xA;&lt;p&gt;The URI acronym stands for &lt;em&gt;Uniform Resource Identifier&lt;/em&gt;. It&amp;rsquo;s follow rules same as URL&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU Cache 高速缓存</title>
      <link>https://hamhuo.xyz/school/opreationsystem/cpu%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/opreationsystem/cpu%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;strong&gt;CPU 缓存是为了解决 CPU 处理速度和内存处理速度不对等的问题。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250205094918596.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CPU Cache 的工作方式：&lt;/strong&gt; 先复制一份数据到 CPU Cache 中，当 CPU 需要用到的时候就可以直接从 CPU Cache 中读取数据，当运算完成后，再将运算得到的数据写回 Main Memory 中。但是，这样存在 &lt;strong&gt;内存缓存不一致性的问题&lt;/strong&gt; ！比如我执行一个 i++ 操作的话，如果两个线程同时执行的话，假设两个线程从 CPU Cache 中读取的 i=1，两个线程做了 i++ 运算完之后再写回 Main Memory 之后 i=2，而正确结果应该是 i=3。&lt;/p&gt;&#xA;&lt;p&gt;操作系统屏蔽了底层硬件的操作细节，将各种硬件资源虚拟化。于是，操作系统也就同样需要解决内存缓存不一致性问题。&lt;/p&gt;&#xA;&lt;p&gt;操作系统通过 &lt;strong&gt;内存模型（Memory Model）&lt;/strong&gt; 定义一系列规范来解决这个问题。无论是 Windows 系统，还是 Linux 系统，它们都有特定的内存模型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning with gradient descent</title>
      <link>https://hamhuo.xyz/graphicsai/gradientdescent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/gradientdescent/</guid>
      <description>&lt;p&gt; &lt;em&gt;&lt;strong&gt;our goal in training a neural network is to find weights and biases which minimize the quadratic cost function C(w,b)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We already kown how neural network is functioned. an input layer and outputlayer and hidden layer.&lt;/p&gt;&#xA;&lt;p&gt;To let network learn itself, we need some data. Like digits&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250312200233941.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Actually, these digits come from a well-known training dataset called the &lt;strong&gt;MNIST dataset&lt;/strong&gt;, which contains tens of thousands of scanned images of handwritten digits along with their correct classifications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neutral Network</title>
      <link>https://hamhuo.xyz/graphicsai/neunet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/neunet/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;refer:&#xA;&lt;a href=&#34;http://neuralnetworksanddeeplearning.com/chap1.html&#34;&gt;Using neural nets to recognize handwritten digits&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;patience in the face of such frustration is the only way to truly understand and internalize a subject.&lt;/strong&gt;&lt;/em&gt;  FIND YOUR PROJECT&lt;/p&gt;&#xA;&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#overview&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;h6 id=&#34;recognize-hand-digits&#34;&gt;recognize hand digits&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#recognize-hand-digits&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;Let&amp;rsquo;s start from a basic task,  recognize those digits&#xA; we don&amp;rsquo;t usually appreciate how tough a problem our visual systems solve.&#xA; &#xA; write a computer program to recognize digits like those above&#xA; &#xA; try to make such rules precise will got tou confuse&lt;/p&gt;</description>
    </item>
    <item>
      <title>NumberFun</title>
      <link>https://hamhuo.xyz/codewar/numberfun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/codewar/numberfun/</guid>
      <description>&lt;p&gt;You might know some pretty large perfect squares. But what about the NEXT one?&lt;/p&gt;&#xA;&lt;p&gt;Complete the &lt;code&gt;findNextSquare&lt;/code&gt; method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.&lt;/p&gt;&#xA;&lt;p&gt;If the argument is itself not a perfect square then return either &lt;code&gt;-1&lt;/code&gt; or an empty value like &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, depending on your language. You may assume the argument is non-negative.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quick Start</title>
      <link>https://hamhuo.xyz/graphicsai/torch/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/torch/start/</guid>
      <description>&lt;p&gt;PyTorch is an open-source deep learning framework that’s known for its flexibility and ease-of-use.&lt;/p&gt;&#xA;&lt;h5 id=&#34;python-grammer&#34;&gt;Python Grammer&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#python-grammer&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;understand that as a playground with instructure.&#xA;define a function use &lt;em&gt;&lt;strong&gt;def&lt;/strong&gt;&lt;/em&gt; , function in python can return multiable values&#xA;no need of type &lt;em&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In python list is reinitializable, and turple is fixed and unchangable&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81c8be&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;math&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;move&lt;/span&gt;(x, y, step, angle&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nx &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;+&lt;/span&gt; step &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;cos(angle)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ny &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;-&lt;/span&gt; step &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;sin(angle)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;return&lt;/span&gt; nx, ny&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x, y &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; move(&lt;span style=&#34;color:#ef9f76&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;60&lt;/span&gt;, math&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;.&lt;/span&gt;pi &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;6&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;print&lt;/span&gt;(x, y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;151.96152422706632&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;70.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A huge improve is Python supports default para. In tons of value need to write value, we can ignore the fixed values and only trans uniqe ones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The architecture of neural networks</title>
      <link>https://hamhuo.xyz/graphicsai/archofneunet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/archofneunet/</guid>
      <description>&lt;p&gt;neural network have three layers , input layer , output layer and &amp;rsquo;not an input or output layer&#39;&lt;/p&gt;&#xA;&lt;p&gt;again, we have an network&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250308014518176.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;the leftmost layer is input neurons the rightmost is outputneurons&#xA;The middle layer is called a &lt;em&gt;hidden layer&lt;/em&gt; t really means nothing more than &amp;ldquo;not an input or an output&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;input and output often strightforword, while there is often an art to the design of the hidden layers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>存储器的层次结构</title>
      <link>https://hamhuo.xyz/school/opreationsystem/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/opreationsystem/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;在计算机执行时，几乎每一条指令都涉及对存储器的访问，存储器的速度必须非常快，能与处理机的速度相匹配，否则会明显地影响到处理机的运行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250205094702438.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;存储层次至少应具有三级：&lt;/p&gt;&#xA;&lt;p&gt;最高层为CPU寄存器，中间为主存，最底层是辅存。&lt;/p&gt;&#xA;&lt;p&gt;其中寄存器和主存也被称为 &lt;em&gt;可执行存储器&lt;/em&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;可执行存储器&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;是通过访问方式区分的&lt;/p&gt;&#xA;&lt;p&gt;可执行存储器 使用一条load或store指令对可执行存储器进行访问。&lt;/p&gt;&#xA;&lt;p&gt;对辅存的访问则需要通过I/O设备实现。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;主存储器&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;主存储器 主存储器简称内存或主存，&lt;/p&gt;&#xA;&lt;p&gt;是计算机系统中的主要部件，&lt;/p&gt;&#xA;&lt;p&gt;用于保存进程运行时的程序和数据，也称可执行存储器&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;寄存器&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;寄存器具有与处理机相同的速度，&lt;/p&gt;&#xA;&lt;p&gt;故对寄存器的访问速度最快，完全能与CPU协调工作，&lt;/p&gt;&#xA;&lt;p&gt;但价格却十分昂贵，因此容量不可能做得很大。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[&lt;em&gt;高速缓存&lt;/em&gt;](CPU Cache 高速缓存)&lt;/p&gt;&#xA;&lt;p&gt;高速缓存是介于寄存器和存储器之间的存储器，&lt;/p&gt;&#xA;&lt;p&gt;主要用于备份主存中较常用的数据，&lt;/p&gt;&#xA;&lt;p&gt;以减少处理机对主存储器的访问次数，&lt;/p&gt;&#xA;&lt;p&gt;这样可大幅度地提高程序执行速度。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;磁盘缓存&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;目前磁盘的I/O速度远低于对主存的访问速度，&lt;/p&gt;&#xA;&lt;p&gt;为了缓和两者之间在速度上的不匹配，而设置了磁盘缓存，主要用于暂时存放频繁使用的一部分磁盘数据和信息，&#xA;以减少访问磁盘的次数。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>操作系统基本特性</title>
      <link>https://hamhuo.xyz/school/opreationsystem/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/opreationsystem/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;h4 id=&#34;并发&#34;&gt;并发&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%b9%b6%e5%8f%91&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;OS能够提高系统资源利用率的原因&lt;/p&gt;&#xA;&lt;p&gt;并发是指&lt;strong&gt;多个任务在同一时间段内被处理&lt;/strong&gt;，但并不意味着它们必须是&lt;strong&gt;同时&lt;/strong&gt;发生的。实际上，处理器可能会在同一时刻只能处理一个任务，但操作系统通过切换任务的方式让多个任务在短时间间隔内“交替”执行。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;并发的关键特点&lt;/strong&gt;是：在同一时间段内，多个任务会被交替执行，这种交替执行给人感觉是同时进行的。操作系统调度器负责任务切换。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;共享&#34;&gt;&lt;strong&gt;共享&lt;/strong&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%85%b1%e4%ba%ab&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;在操作系统中，共享资源需要控制不同进程或线程的访问，常见的控制方式有 &lt;strong&gt;互斥&lt;/strong&gt; 和 &lt;strong&gt;同时&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;共享资源&lt;/strong&gt;是指多个进程或线程可以访问同一块内存或设备资源。例如，多个进程同时访问打印机、磁带机等共享设备。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作系统中的共享&lt;/strong&gt;通常是通过 &lt;strong&gt;锁机制&lt;/strong&gt;（如互斥锁、读写锁等）来避免资源竞争问题，确保资源访问的有序性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;1-互斥&#34;&gt;1. 互斥&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#1-%e4%ba%92%e6%96%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;互斥是指在&lt;strong&gt;某一时间&lt;/strong&gt;，只能允许&lt;strong&gt;一个进程或线程&lt;/strong&gt;访问共享资源，防止并发执行时的资源冲突。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如，打印机是共享资源，但同一时刻只能由一个进程打印，其他进程需等待。&lt;/li&gt;&#xA;&lt;li&gt;操作系统通过 &lt;strong&gt;互斥锁（Mutex）&lt;/strong&gt; 来保证同一时间内只有一个进程（或线程）能访问资源。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-同时&#34;&gt;2. 同时&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#2-%e5%90%8c%e6%97%b6&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;同时是指多个进程或线程&lt;strong&gt;在时间上交替执行&lt;/strong&gt;共享资源的访问请求，而非在同一时刻访问。&#xA;例如，某个设备在微观上并不是完全同时被多个进程访问，而是交替执行。&lt;/p&gt;&#xA;&lt;h4 id=&#34;虚拟&#34;&gt;&lt;strong&gt;虚拟&lt;/strong&gt;&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%99%9a%e6%8b%9f&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;操作系统通过软件技术为应用程序和用户提供的一种抽象和隔离机制，使得多个程序可以在相同的硬件资源上独立运行，并且每个程序认为它独占系统资源，实际上是操作系统通过合理调度和资源分配来共享这些资源。&lt;/p&gt;&#xA;&lt;h5 id=&#34;时分复用time-division-multiplexing-tdm&#34;&gt;时分复用（Time Division Multiplexing, TDM）&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%97%b6%e5%88%86%e5%a4%8d%e7%94%a8time-division-multiplexing-tdm&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;时分复用是指&lt;strong&gt;通过时间片轮转的方式&lt;/strong&gt;将处理器时间分配给多个用户或任务。每个用户在指定的时间段内占用资源，其他用户则需等待空闲时间。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：操作系统通过时间片轮转的方式将 CPU 时间分配给各个进程，保证每个进程都有机会执行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;空分复用frequency-division-multiplexing-fdm&#34;&gt;空分复用（Frequency Division Multiplexing, FDM）&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e7%a9%ba%e5%88%86%e5%a4%8d%e7%94%a8frequency-division-multiplexing-fdm&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;空分复用通过将&lt;strong&gt;频带划分成多个较小的频带&lt;/strong&gt;来为不同的通信用户提供服务，每个用户在一个独立的频带内通信。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：在无线通信中，多个通信设备通过不同的频率带宽进行通讯。每个设备占用一个特定频段。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;异步&#34;&gt;异步&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%bc%82%e6%ad%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;在多道程序并发的环境下，每个程序何时执行、何时暂停 都是未知的，即他们以不可预知的速度向前推进，&lt;/p&gt;&#xA;&lt;p&gt;操作系统 应当保证程序执行结果的可再现性。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;执行顺序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h5 id=&#34;同步&#34;&gt;同步&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%90%8c%e6%ad%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;同步是指任务的执行是&lt;strong&gt;按顺序进行&lt;/strong&gt;的，一个任务完成后，另一个任务才能开始执行。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：多个进程依次在 CPU 上执行，前一个任务完成后，后一个任务才能开始。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;异步-1&#34;&gt;异步&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%bc%82%e6%ad%a5-1&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;异步是指任务的执行&lt;strong&gt;不必按顺序进行&lt;/strong&gt;，多个任务可以并行执行，任务之间的执行顺序不受限制。每个任务执行时不会阻塞其他任务的执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程同步</title>
      <link>https://hamhuo.xyz/school/opreationsystem/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/opreationsystem/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;临界资源&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;一次只允许一个进程使用，多个进程同时使用就会造成系统混乱的资源&lt;/p&gt;&#xA;&lt;p&gt;诸进程间应采取互斥方式，实现对这种资源的共享。&lt;/p&gt;&#xA;&lt;p&gt;源如打印机、 磁带机、共享变量等&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;临界区&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;无论是硬件临界资源&lt;/p&gt;&#xA;&lt;p&gt;还是软件临界资源&lt;/p&gt;&#xA;&lt;p&gt;多个进程必须互斥的对它进行访问&lt;/p&gt;&#xA;&lt;p&gt;在每个进程中访问临界资源的这段&lt;strong&gt;代码&lt;/strong&gt;称之为临界区&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/image-20250109233136840.png&#34; alt=&#34;image-20250109233136840&#34;&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;临界区的作用&#34;&gt;临界区的作用&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e4%b8%b4%e7%95%8c%e5%8c%ba%e7%9a%84%e4%bd%9c%e7%94%a8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;ol&gt;&#xA;&lt;li&gt;保护共享资源&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;通过互斥访问机制，任意时刻只有一个线程修改和访问共享数据&lt;/p&gt;&#xA;&lt;p&gt;从而保护资源一致性，完整性&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;防止竞态条件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;多个线程同时访问共享资源时&lt;/p&gt;&#xA;&lt;p&gt;由于执行顺序的不确定导致结果不可预测&lt;/p&gt;&#xA;&lt;p&gt;临界区通过确保同一时间只有一个线程运行，避免竞态发生&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;提高程序稳定性&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果不能采取有效的措施，对多个进程的运行进行妥善的管理，&lt;/p&gt;&#xA;&lt;p&gt;必然会因为这些进程对系统资源的无序争夺给系统造成混乱。&lt;/p&gt;&#xA;&lt;p&gt;致使每次处理的结果存在着不确定性，即显现出其不可再现性。&lt;/p&gt;&#xA;&lt;p&gt;有多个进程需要同时修改某一数据，系统必须控制，&#xA;一次仅允许一个进程完成读数据，并修改数据两件事以后，才允许别的进程对同一数据的读和修改操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程的状态与转换</title>
      <link>https://hamhuo.xyz/school/opreationsystem/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/school/opreationsystem/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;h3 id=&#34;进程的状态与转换&#34;&gt;进程的状态与转换&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%8a%b6%e6%80%81%e4%b8%8e%e8%bd%ac%e6%8d%a2&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;多个进程在并发执行时共享系统资源，&lt;/p&gt;&#xA;&lt;p&gt;致使它们在 运行过程中呈现间断性的运行规律，&lt;/p&gt;&#xA;&lt;p&gt;所以进程在其生命周期内可能具有多种状态。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;基本状态&#34;&gt;基本状态&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e7%8a%b6%e6%80%81&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;就绪(Ready)状态&lt;/p&gt;&#xA;&lt;p&gt;执行(Running)状态&lt;/p&gt;&#xA;&lt;p&gt;阻塞(Block)状态&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/20250205105205700.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;创建与终止状态&#34;&gt;创建与终止状态&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%88%9b%e5%bb%ba%e4%b8%8e%e7%bb%88%e6%ad%a2%e7%8a%b6%e6%80%81&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;创建状态&lt;/p&gt;&#xA;&lt;p&gt;进程正在被创建&lt;/p&gt;&#xA;&lt;p&gt;创建工作尚未完成，进程不能被调度运行&lt;/p&gt;&#xA;&lt;p&gt;终止状态&lt;/p&gt;&#xA;&lt;p&gt;进程从系统消失&lt;/p&gt;&#xA;&lt;p&gt;两个步骤：&lt;/p&gt;&#xA;&lt;p&gt;首先，是等待操作系统 进行善后处理，&lt;/p&gt;&#xA;&lt;p&gt;最后将其PCB清零，并将PCB空间返还系统。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/image-20250109201649501.png&#34; alt=&#34;image-20250109201649501&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里注意。就绪到运行获得处理机前需要获得其他所有资源&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Exam.&lt;/p&gt;&#xA;&lt;p&gt;进程描述中正确的&lt;/p&gt;&#xA;&lt;p&gt;A. 进程获得CPU是通过调度得到的&lt;/p&gt;&#xA;&lt;p&gt;B. 进程申请CPU未获满足时，其状态变为阻塞&lt;/p&gt;&#xA;&lt;p&gt;B 进程申请CPU未获满足仍为就绪，只有申请IO或资源失败才是阻塞&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hamhuo-hub/HamPic/img/img/%7BCB7FEC31-EF3E-43F6-BE77-B17715A69A8F%7D.png&#34; alt=&#34;{CB7FEC31-EF3E-43F6-BE77-B17715A69A8F}&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://hamhuo.xyz/dairy/3%E6%9C%881%E6%97%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/dairy/3%E6%9C%881%E6%97%A5/</guid>
      <description>&lt;p&gt;完成了redis的分页和 redis + mysql 悲观锁的一致双写&#xA;今天通宵完成笔记和国际化模块的工作&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Oauth2+Spring Cloud Gateway的项目架构准备好&lt;/li&gt;&#xA;&lt;li&gt;完成鉴权模型的笔记, 流程图梳理完毕&lt;/li&gt;&#xA;&lt;li&gt;redis的八股, 花点钱买热门50八股开始背&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://hamhuo.xyz/graphicsai/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/readme/</guid>
      <description>&lt;h1 id=&#34;ainote&#34;&gt;AINote&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#ainote&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xD;&#xA;&lt;meta name=&#34;baidu-site-verification&#34; content=&#34;codeva-23xblvQ4Jb&#34; /&gt;&lt;p&gt;a remote repository of Massey&lt;/p&gt;&#xA;&lt;p&gt;Reference:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://neuralnetworksanddeeplearning.com/chap1.html#learning_with_gradient_descent&#34;&gt;http://neuralnetworksanddeeplearning.com/chap1.html#learning_with_gradient_descent&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://hamhuo.xyz/graphicsai/vae/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/graphicsai/vae/</guid>
      <description></description>
    </item>
    <item>
      <title>Search Results</title>
      <link>https://hamhuo.xyz/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hamhuo.xyz/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
